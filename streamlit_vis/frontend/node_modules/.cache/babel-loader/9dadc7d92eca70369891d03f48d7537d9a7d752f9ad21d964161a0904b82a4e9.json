{"ast":null,"code":"import React from'react';import{Network}from'vis-network';import{DataSet}from'vis-data';import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";class VisNetwork extends StreamlitComponentBase{constructor(){super(...arguments);this.container=/*#__PURE__*/React.createRef();this.networkContainer=/*#__PURE__*/React.createRef();this.backgroundCanvas=/*#__PURE__*/React.createRef();this.backgroundImage=null;this.animationFrame=null;this.viewportUpdateTimeout=null;this.state={network:null,nodes:new DataSet([]),edges:new DataSet([]),viewportInitialized:false};}componentDidMount(){console.log(\"Component mounted\");Streamlit.setFrameHeight(600);this.setupNetwork();}componentDidUpdate(){const props=this.props.args;// Handle network data updates\nif(this.state.network){const nodes=new DataSet(props.nodes);const edges=new DataSet(props.edges);this.state.network.setData({nodes,edges});// Only set viewport if it's provided and hasn't been initialized yet\nif(props.viewport&&!this.state.viewportInitialized){this.state.network.moveTo({position:props.viewport.position,scale:props.viewport.scale,animation:false});this.setState({viewportInitialized:true});}}// Handle background image updates\nif(props.background_image&&(!this.backgroundImage||this.backgroundImage.src!==props.background_image)){this.setupBackgroundImage(props.background_image);}}componentWillUnmount(){if(this.state.network){this.state.network.destroy();}if(this.animationFrame){cancelAnimationFrame(this.animationFrame);}if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}}setupBackgroundImage(imageUrl){const img=new Image();img.onload=()=>{console.log(\"Background image loaded\",{width:img.width,height:img.height});this.backgroundImage=img;this.startRenderLoop();};img.onerror=e=>{console.error(\"Error loading background image:\",e);};img.src=imageUrl;}renderBackground(){if(!this.backgroundCanvas.current||!this.backgroundImage||!this.state.network)return;const canvas=this.backgroundCanvas.current;const ctx=canvas.getContext('2d');if(!ctx)return;// Get current viewport state\nconst position=this.state.network.getViewPosition();const scale=this.state.network.getScale();// Ensure canvas dimensions match container\nconst containerRect=canvas.getBoundingClientRect();canvas.width=containerRect.width;canvas.height=containerRect.height;// Clear canvas\nctx.clearRect(0,0,canvas.width,canvas.height);// Calculate dimensions based on scale - directly matching the working example\nconst srcWidth=canvas.width/scale;const srcHeight=canvas.height/scale;const imgCenterX=this.backgroundImage.width/2-srcWidth/2+position.x;const imgCenterY=this.backgroundImage.height/2-srcHeight/2+position.y;try{ctx.drawImage(this.backgroundImage,imgCenterX,imgCenterY,srcWidth,srcHeight,0,0,canvas.width,canvas.height);}catch(error){console.error(\"Error rendering background:\",error);}this.animationFrame=requestAnimationFrame(()=>this.renderBackground());}startRenderLoop(){if(this.animationFrame){cancelAnimationFrame(this.animationFrame);}this.renderBackground();}setupNetwork(){if(!this.networkContainer.current)return;const props=this.props.args;const nodes=new DataSet(props.nodes);const edges=new DataSet(props.edges);const network=new Network(this.networkContainer.current,{nodes,edges},props.options);// Set up event handlers\nnetwork.on('select',params=>{Streamlit.setComponentValue({selected:params.nodes,positions:this.getNodePositions()});});network.on('dragEnd',()=>{if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}this.viewportUpdateTimeout=setTimeout(()=>{Streamlit.setComponentValue({selected:network.getSelectedNodes(),positions:this.getNodePositions(),viewport:{scale:network.getScale(),position:network.getViewPosition()}});},100);});network.on('zoom',()=>{if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}this.viewportUpdateTimeout=setTimeout(()=>{Streamlit.setComponentValue({selected:network.getSelectedNodes(),positions:this.getNodePositions(),viewport:{scale:network.getScale(),position:network.getViewPosition()}});},100);});// Initial viewport setup\nif(props.viewport&&!this.state.viewportInitialized){network.once('afterDrawing',()=>{network.moveTo({position:props.viewport.position,scale:props.viewport.scale,animation:false});this.setState({viewportInitialized:true});});}this.setState({network,nodes,edges});}getNodePositions(){if(!this.state.network||!this.state.nodes)return{};const positions={};this.state.nodes.forEach(node=>{const pos=this.state.network.getPosition(node.id);positions[node.id]={x:pos.x,y:pos.y};});return positions;}render(){return/*#__PURE__*/_jsxs(\"div\",{ref:this.container,style:{width:'100%',height:'600px',position:'relative',border:'1px solid #ddd',overflow:'hidden'},children:[/*#__PURE__*/_jsx(\"canvas\",{ref:this.backgroundCanvas,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',zIndex:0,opacity:0.3}}),/*#__PURE__*/_jsx(\"div\",{ref:this.networkContainer,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',zIndex:1}})]});}}export default withStreamlitConnection(VisNetwork);","map":{"version":3,"names":["React","Network","DataSet","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsx","_jsx","jsxs","_jsxs","VisNetwork","constructor","arguments","container","createRef","networkContainer","backgroundCanvas","backgroundImage","animationFrame","viewportUpdateTimeout","state","network","nodes","edges","viewportInitialized","componentDidMount","console","log","setFrameHeight","setupNetwork","componentDidUpdate","props","args","setData","viewport","moveTo","position","scale","animation","setState","background_image","src","setupBackgroundImage","componentWillUnmount","destroy","cancelAnimationFrame","clearTimeout","imageUrl","img","Image","onload","width","height","startRenderLoop","onerror","e","error","renderBackground","current","canvas","ctx","getContext","getViewPosition","getScale","containerRect","getBoundingClientRect","clearRect","srcWidth","srcHeight","imgCenterX","x","imgCenterY","y","drawImage","requestAnimationFrame","options","on","params","setComponentValue","selected","positions","getNodePositions","setTimeout","getSelectedNodes","once","forEach","node","pos","getPosition","id","render","ref","style","border","overflow","children","top","left","zIndex","opacity"],"sources":["C:/Users/owner/Documents/Innovative Dev/Sensor Sentry GUI - Streamlit/streamlit_vis/frontend/src/VisNetwork.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Network } from 'vis-network';\r\nimport { DataSet } from 'vis-data';\r\nimport {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\n\r\ninterface NetworkProps {\r\n  nodes: any[];\r\n  edges: any[];\r\n  options: any;\r\n  background_image?: string;\r\n  height?: string;\r\n  viewport?: {\r\n    position: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    scale: number;\r\n  };\r\n}\r\n\r\ninterface State {\r\n  network: Network | null;\r\n  nodes: DataSet<any>;\r\n  edges: DataSet<any>;\r\n  viewportInitialized: boolean;\r\n}\r\n\r\nclass VisNetwork extends StreamlitComponentBase<State> {\r\n  private container = React.createRef<HTMLDivElement>();\r\n  private networkContainer = React.createRef<HTMLDivElement>();\r\n  private backgroundCanvas = React.createRef<HTMLCanvasElement>();\r\n  private backgroundImage: HTMLImageElement | null = null;\r\n  private animationFrame: number | null = null;\r\n  private viewportUpdateTimeout: NodeJS.Timeout | null = null;\r\n  \r\n  public state: State = {\r\n    network: null,\r\n    nodes: new DataSet([]),\r\n    edges: new DataSet([]),\r\n    viewportInitialized: false\r\n  };\r\n\r\n  public componentDidMount() {\r\n    console.log(\"Component mounted\");\r\n    Streamlit.setFrameHeight(600);\r\n    this.setupNetwork();\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    const props = this.props.args as NetworkProps;\r\n    \r\n    // Handle network data updates\r\n    if (this.state.network) {\r\n      const nodes = new DataSet(props.nodes);\r\n      const edges = new DataSet(props.edges);\r\n      this.state.network.setData({ nodes, edges });\r\n\r\n      // Only set viewport if it's provided and hasn't been initialized yet\r\n      if (props.viewport && !this.state.viewportInitialized) {\r\n        this.state.network.moveTo({\r\n          position: props.viewport.position,\r\n          scale: props.viewport.scale,\r\n          animation: false\r\n        });\r\n        this.setState({ viewportInitialized: true });\r\n      }\r\n    }\r\n\r\n    // Handle background image updates\r\n    if (props.background_image && (!this.backgroundImage || this.backgroundImage.src !== props.background_image)) {\r\n      this.setupBackgroundImage(props.background_image);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this.state.network) {\r\n        this.state.network.destroy();\r\n    }\r\n    if (this.animationFrame) {\r\n        cancelAnimationFrame(this.animationFrame);\r\n    }\r\n    if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n    }\r\n}\r\n\r\n  private setupBackgroundImage(imageUrl: string) {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      console.log(\"Background image loaded\", { width: img.width, height: img.height });\r\n      this.backgroundImage = img;\r\n      this.startRenderLoop();\r\n    };\r\n    img.onerror = (e) => {\r\n      console.error(\"Error loading background image:\", e);\r\n    };\r\n    img.src = imageUrl;\r\n  }\r\n\r\n  private renderBackground() {\r\n    if (!this.backgroundCanvas.current || !this.backgroundImage || !this.state.network) return;\r\n    \r\n    const canvas = this.backgroundCanvas.current;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Get current viewport state\r\n    const position = this.state.network.getViewPosition();\r\n    const scale = this.state.network.getScale();\r\n\r\n    // Ensure canvas dimensions match container\r\n    const containerRect = canvas.getBoundingClientRect();\r\n    canvas.width = containerRect.width;\r\n    canvas.height = containerRect.height;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Calculate dimensions based on scale - directly matching the working example\r\n    const srcWidth = canvas.width / scale;\r\n    const srcHeight = canvas.height / scale;\r\n    const imgCenterX = ((this.backgroundImage.width / 2) - srcWidth / 2) + position.x;\r\n    const imgCenterY = ((this.backgroundImage.height / 2) - srcHeight / 2) + position.y;\r\n\r\n    try {\r\n      ctx.drawImage(\r\n        this.backgroundImage,\r\n        imgCenterX,\r\n        imgCenterY,\r\n        srcWidth,\r\n        srcHeight,\r\n        0,\r\n        0,\r\n        canvas.width,\r\n        canvas.height\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error rendering background:\", error);\r\n    }\r\n\r\n    this.animationFrame = requestAnimationFrame(() => this.renderBackground());\r\n  }\r\n\r\n  private startRenderLoop() {\r\n    if (this.animationFrame) {\r\n      cancelAnimationFrame(this.animationFrame);\r\n    }\r\n    this.renderBackground();\r\n  }\r\n\r\n  private setupNetwork() {\r\n    if (!this.networkContainer.current) return;\r\n\r\n    const props = this.props.args as NetworkProps;\r\n    const nodes = new DataSet(props.nodes);\r\n    const edges = new DataSet(props.edges);\r\n\r\n    const network = new Network(\r\n      this.networkContainer.current,\r\n      { nodes, edges },\r\n      props.options\r\n    );\r\n\r\n    // Set up event handlers\r\n    network.on('select', (params) => {\r\n      Streamlit.setComponentValue({\r\n        selected: params.nodes,\r\n        positions: this.getNodePositions()\r\n      });\r\n    });\r\n\r\n    network.on('dragEnd', () => {\r\n      if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n      }\r\n\r\n      this.viewportUpdateTimeout = setTimeout(() => {\r\n        Streamlit.setComponentValue({\r\n          selected: network.getSelectedNodes(),\r\n          positions: this.getNodePositions(),\r\n          viewport: {\r\n            scale: network.getScale(),\r\n            position: network.getViewPosition()\r\n          }\r\n        });\r\n      }, 100);\r\n    });\r\n\r\n    network.on('zoom', () => {\r\n      if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n      }\r\n\r\n      this.viewportUpdateTimeout = setTimeout(() => {\r\n        Streamlit.setComponentValue({\r\n          selected: network.getSelectedNodes(),\r\n          positions: this.getNodePositions(),\r\n          viewport: {\r\n            scale: network.getScale(),\r\n            position: network.getViewPosition()\r\n          }\r\n        });\r\n      }, 100);\r\n    });\r\n\r\n    // Initial viewport setup\r\n    if (props.viewport && !this.state.viewportInitialized) {\r\n      network.once('afterDrawing', () => {\r\n        network.moveTo({\r\n          position: props.viewport!.position,\r\n          scale: props.viewport!.scale,\r\n          animation: false\r\n        });\r\n        this.setState({ viewportInitialized: true });\r\n      });\r\n    }\r\n\r\n    this.setState({ network, nodes, edges });\r\n  }\r\n\r\n  private getNodePositions() {\r\n    if (!this.state.network || !this.state.nodes) return {};\r\n    \r\n    const positions: { [key: string]: { x: number, y: number } } = {};\r\n    this.state.nodes.forEach((node) => {\r\n        const pos = this.state.network!.getPosition(node.id);\r\n        positions[node.id] = { x: pos.x, y: pos.y };\r\n    });\r\n    \r\n    return positions;\r\n}\r\n\r\n  public render() {\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={{\r\n          width: '100%',\r\n          height: '600px',\r\n          position: 'relative',\r\n          border: '1px solid #ddd',\r\n          overflow: 'hidden'\r\n        }}\r\n      >\r\n        <canvas\r\n          ref={this.backgroundCanvas}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            zIndex: 0,\r\n            opacity: 0.3\r\n          }}\r\n        />\r\n        <div \r\n          ref={this.networkContainer}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            zIndex: 1\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(VisNetwork);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}