{"ast":null,"code":"import React from'react';import{Network}from'vis-network';import{DataSet}from'vis-data';import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";class VisNetwork extends StreamlitComponentBase{constructor(){super(...arguments);this.container=/*#__PURE__*/React.createRef();this.networkContainer=/*#__PURE__*/React.createRef();this.backgroundCanvas=/*#__PURE__*/React.createRef();this.backgroundImage=null;this.animationFrame=null;this.viewportUpdateTimeout=null;this.updateFrame=null;this.state={network:null,nodes:new DataSet([]),edges:new DataSet([]),viewportInitialized:false,isStabilized:false};}componentDidMount(){console.log(\"Component mounted\");Streamlit.setFrameHeight(600);this.setupNetwork();}componentDidUpdate(){const props=this.props.args;if(!this.state.network)return;try{// Handle single node updates\nif(props.updates){console.log(\"Processing node update:\",props.updates);const{nodeId,nodeData}=props.updates;if(!this.state.nodes)return;const updateData={...nodeData,id:nodeId,shape:'box'// Start with box shape\n};// Update node\nthis.state.nodes.update(updateData);// Add SVG after short delay\nsetTimeout(()=>{if(this.state.nodes){this.state.nodes.update({id:nodeId,shape:'custom',ctxRenderer:nodeData.ctxRenderer});}},50);}// Handle full updates\nelse if(props.nodes&&props.nodes.length>0){console.log(\"Processing full network update\");this.setupNetwork();// Recreate network with new data\n}}catch(error){console.error(\"Error in componentDidUpdate:\",error);}}// Add helper methods to prevent unnecessary updates\nshouldSkipFullUpdate(newProps){var _this$state$nodes,_this$state$edges;// Skip if nodes and edges haven't changed\nconst currentNodes=((_this$state$nodes=this.state.nodes)===null||_this$state$nodes===void 0?void 0:_this$state$nodes.get())||[];const currentEdges=((_this$state$edges=this.state.edges)===null||_this$state$edges===void 0?void 0:_this$state$edges.get())||[];if(this.areArraysEqual(currentNodes,newProps.nodes)&&this.areArraysEqual(currentEdges,newProps.edges)){return true;}return false;}areArraysEqual(arr1,arr2){if(arr1.length!==arr2.length)return false;return arr1.every((item,index)=>{var _item$ctxRenderer,_item2$ctxRenderer;const item2=arr2[index];// Compare only essential properties\nreturn item.id===item2.id&&item.label===item2.label&&((_item$ctxRenderer=item.ctxRenderer)===null||_item$ctxRenderer===void 0?void 0:_item$ctxRenderer.template)===((_item2$ctxRenderer=item2.ctxRenderer)===null||_item2$ctxRenderer===void 0?void 0:_item2$ctxRenderer.template);});}handleNodeUpdate(update){if(!this.state.nodes)return;try{var _this$state$network,_this$state$network2;// Get current position and selection state\nconst position=(_this$state$network=this.state.network)===null||_this$state$network===void 0?void 0:_this$state$network.getPosition(update.nodeId);const isSelected=(_this$state$network2=this.state.network)===null||_this$state$network2===void 0?void 0:_this$state$network2.getSelectedNodes().includes(update.nodeId);// Update the node in the DataSet\nthis.state.nodes.update({id:update.nodeId,...update.nodeData,x:position===null||position===void 0?void 0:position.x,y:position===null||position===void 0?void 0:position.y,fixed:true// Temporarily fix position\n});// Unfix position after a brief delay\nsetTimeout(()=>{this.state.nodes.update({id:update.nodeId,fixed:false});},100);// Restore selection if needed\nif(isSelected){var _this$state$network3;(_this$state$network3=this.state.network)===null||_this$state$network3===void 0?void 0:_this$state$network3.selectNodes([update.nodeId],true);}console.log(`Node ${update.nodeId} updated successfully`);}catch(error){console.error(\"Error updating node:\",error);}}setupNetwork(){if(!this.networkContainer.current)return;const props=this.props.args;// Create nodes with basic shapes first\nconst initialNodes=props.nodes.map(node=>({...node,shape:'box',// Start with box shape\nsize:40,font:{size:14,face:'arial',multi:true},margin:10}));const nodes=new DataSet(initialNodes);const edges=new DataSet(props.edges||[]);const mergedOptions={...props.options,nodes:{shape:'box',font:{size:14,face:'arial',multi:true},size:40,borderWidth:2,margin:10},physics:{enabled:false}};const network=new Network(this.networkContainer.current,{nodes,edges},mergedOptions);// Set up event handlers\nnetwork.on('select',params=>{Streamlit.setComponentValue({selected:params.nodes,positions:this.getNodePositions()});});network.on('stabilized',()=>{console.log(\"Network stabilized\");if(!this.state.isStabilized&&props.viewport){network.moveTo({position:props.viewport.position,scale:props.viewport.scale,animation:false});this.setState({isStabilized:true,viewportInitialized:true});}});network.on('dragEnd',()=>{if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}this.viewportUpdateTimeout=setTimeout(()=>{if(this.state.isStabilized){Streamlit.setComponentValue({selected:network.getSelectedNodes(),positions:this.getNodePositions(),viewport:{scale:network.getScale(),position:network.getViewPosition()}});}},100);});network.on('zoom',()=>{if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}this.viewportUpdateTimeout=setTimeout(()=>{if(this.state.isStabilized){Streamlit.setComponentValue({selected:network.getSelectedNodes(),positions:this.getNodePositions(),viewport:{scale:network.getScale(),position:network.getViewPosition()}});}},100);});this.setState({network,nodes,edges});// Handle background image if provided\nif(props.background_image){this.setupBackgroundImage(props.background_image);}// After network is stable, update nodes with SVG\nsetTimeout(()=>{if(this.state.nodes){const updatedNodes=props.nodes.map(node=>{var _node$ctxRenderer,_node$ctxRenderer2;return{...node,shape:'custom',ctxRenderer:{template:((_node$ctxRenderer=node.ctxRenderer)===null||_node$ctxRenderer===void 0?void 0:_node$ctxRenderer.template)||'',size:((_node$ctxRenderer2=node.ctxRenderer)===null||_node$ctxRenderer2===void 0?void 0:_node$ctxRenderer2.size)||40,enableSVG:true,svgScale:1,render:(ctx,node)=>{var _node$ctxRenderer3;if(!((_node$ctxRenderer3=node.ctxRenderer)!==null&&_node$ctxRenderer3!==void 0&&_node$ctxRenderer3.template))return;try{// Create SVG data URL\nconst svgBlob=new Blob([node.ctxRenderer.template],{type:'image/svg+xml'});const url=URL.createObjectURL(svgBlob);// Create and draw image\nconst img=new Image();img.onload=()=>{ctx.drawImage(img,-node.ctxRenderer.size/2,-node.ctxRenderer.size/2,node.ctxRenderer.size,node.ctxRenderer.size);URL.revokeObjectURL(url);};img.src=url;}catch(error){console.error(\"Error rendering node SVG:\",error);}}}};});this.state.nodes.update(updatedNodes);}},100);}getNodePositions(){if(!this.state.network||!this.state.nodes)return{};const positions={};this.state.nodes.forEach(node=>{const pos=this.state.network.getPosition(node.id);positions[node.id]={x:pos.x,y:pos.y};});return positions;}componentWillUnmount(){if(this.state.network){this.state.network.destroy();}if(this.animationFrame){cancelAnimationFrame(this.animationFrame);}if(this.updateFrame){cancelAnimationFrame(this.updateFrame);}if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}}setupBackgroundImage(imageUrl){const img=new Image();img.onload=()=>{console.log(\"Background image loaded\",{width:img.width,height:img.height});this.backgroundImage=img;this.startRenderLoop();};img.onerror=e=>{console.error(\"Error loading background image:\",e);};img.src=imageUrl;}startRenderLoop(){if(this.animationFrame){cancelAnimationFrame(this.animationFrame);}this.renderBackground();}renderBackground(){if(!this.backgroundCanvas.current||!this.backgroundImage||!this.state.network)return;const canvas=this.backgroundCanvas.current;const ctx=canvas.getContext('2d');if(!ctx)return;// Get current viewport state\nconst position=this.state.network.getViewPosition();const scale=this.state.network.getScale();// Ensure canvas dimensions match container\nconst containerRect=canvas.getBoundingClientRect();canvas.width=containerRect.width;canvas.height=containerRect.height;// Clear canvas\nctx.clearRect(0,0,canvas.width,canvas.height);// Calculate dimensions based on scale\nconst srcWidth=canvas.width/scale;const srcHeight=canvas.height/scale;const imgCenterX=this.backgroundImage.width/2-srcWidth/2+position.x;const imgCenterY=this.backgroundImage.height/2-srcHeight/2+position.y;try{ctx.drawImage(this.backgroundImage,imgCenterX,imgCenterY,srcWidth,srcHeight,0,0,canvas.width,canvas.height);}catch(error){console.error(\"Error rendering background:\",error);}this.animationFrame=requestAnimationFrame(()=>this.renderBackground());}render(){return/*#__PURE__*/_jsxs(\"div\",{ref:this.container,style:{width:'100%',height:'600px',position:'relative',border:'1px solid #ddd',overflow:'hidden'},children:[/*#__PURE__*/_jsx(\"canvas\",{ref:this.backgroundCanvas,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',zIndex:0,opacity:0.3}}),/*#__PURE__*/_jsx(\"div\",{ref:this.networkContainer,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',zIndex:1}})]});}}export default withStreamlitConnection(VisNetwork);","map":{"version":3,"names":["React","Network","DataSet","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsx","_jsx","jsxs","_jsxs","VisNetwork","constructor","arguments","container","createRef","networkContainer","backgroundCanvas","backgroundImage","animationFrame","viewportUpdateTimeout","updateFrame","state","network","nodes","edges","viewportInitialized","isStabilized","componentDidMount","console","log","setFrameHeight","setupNetwork","componentDidUpdate","props","args","updates","nodeId","nodeData","updateData","id","shape","update","setTimeout","ctxRenderer","length","error","shouldSkipFullUpdate","newProps","_this$state$nodes","_this$state$edges","currentNodes","get","currentEdges","areArraysEqual","arr1","arr2","every","item","index","_item$ctxRenderer","_item2$ctxRenderer","item2","label","template","handleNodeUpdate","_this$state$network","_this$state$network2","position","getPosition","isSelected","getSelectedNodes","includes","x","y","fixed","_this$state$network3","selectNodes","current","initialNodes","map","node","size","font","face","multi","margin","mergedOptions","options","borderWidth","physics","enabled","on","params","setComponentValue","selected","positions","getNodePositions","viewport","moveTo","scale","animation","setState","clearTimeout","getScale","getViewPosition","background_image","setupBackgroundImage","updatedNodes","_node$ctxRenderer","_node$ctxRenderer2","enableSVG","svgScale","render","ctx","_node$ctxRenderer3","svgBlob","Blob","type","url","URL","createObjectURL","img","Image","onload","drawImage","revokeObjectURL","src","forEach","pos","componentWillUnmount","destroy","cancelAnimationFrame","imageUrl","width","height","startRenderLoop","onerror","e","renderBackground","canvas","getContext","containerRect","getBoundingClientRect","clearRect","srcWidth","srcHeight","imgCenterX","imgCenterY","requestAnimationFrame","ref","style","border","overflow","children","top","left","zIndex","opacity"],"sources":["C:/Users/owner/Documents/Innovative Dev/Sensor Sentry GUI - Streamlit/streamlit_vis/frontend/src/VisNetwork.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Network } from 'vis-network';\r\nimport { DataSet } from 'vis-data';\r\nimport {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\n\r\ninterface NetworkProps {\r\n  nodes: any[];\r\n  edges: any[];\r\n  options: any;\r\n  background_image?: string;\r\n  height?: string;\r\n  viewport?: {\r\n    position: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    scale: number;\r\n  };\r\n  updates?: {\r\n    nodeId: string;\r\n    nodeData: any;\r\n  };\r\n}\r\n\r\ninterface State {\r\n  network: Network | null;\r\n  nodes: DataSet<any>;\r\n  edges: DataSet<any>;\r\n  viewportInitialized: boolean;\r\n  isStabilized: boolean;\r\n}\r\n\r\nclass VisNetwork extends StreamlitComponentBase<State> {\r\n  private container = React.createRef<HTMLDivElement>();\r\n  private networkContainer = React.createRef<HTMLDivElement>();\r\n  private backgroundCanvas = React.createRef<HTMLCanvasElement>();\r\n  private backgroundImage: HTMLImageElement | null = null;\r\n  private animationFrame: number | null = null;\r\n  private viewportUpdateTimeout: NodeJS.Timeout | null = null;\r\n  private updateFrame: number | null = null;\r\n  \r\n  public state: State = {\r\n    network: null,\r\n    nodes: new DataSet([]),\r\n    edges: new DataSet([]),\r\n    viewportInitialized: false,\r\n    isStabilized: false\r\n  };\r\n\r\n  public componentDidMount() {\r\n    console.log(\"Component mounted\");\r\n    Streamlit.setFrameHeight(600);\r\n    this.setupNetwork();\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    const props = this.props.args as NetworkProps;\r\n    \r\n    if (!this.state.network) return;\r\n\r\n    try {\r\n      // Handle single node updates\r\n      if (props.updates) {\r\n        console.log(\"Processing node update:\", props.updates);\r\n        const { nodeId, nodeData } = props.updates;\r\n        \r\n        if (!this.state.nodes) return;\r\n\r\n        const updateData = {\r\n          ...nodeData,\r\n          id: nodeId,\r\n          shape: 'box'  // Start with box shape\r\n        };\r\n\r\n        // Update node\r\n        this.state.nodes.update(updateData);\r\n\r\n        // Add SVG after short delay\r\n        setTimeout(() => {\r\n          if (this.state.nodes) {\r\n            this.state.nodes.update({\r\n              id: nodeId,\r\n              shape: 'custom',\r\n              ctxRenderer: nodeData.ctxRenderer\r\n            });\r\n          }\r\n        }, 50);\r\n\r\n      }\r\n      // Handle full updates\r\n      else if (props.nodes && props.nodes.length > 0) {\r\n        console.log(\"Processing full network update\");\r\n        this.setupNetwork();  // Recreate network with new data\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error in componentDidUpdate:\", error);\r\n    }\r\n  }\r\n\r\n  // Add helper methods to prevent unnecessary updates\r\n  private shouldSkipFullUpdate(newProps: NetworkProps): boolean {\r\n    // Skip if nodes and edges haven't changed\r\n    const currentNodes = this.state.nodes?.get() || [];\r\n    const currentEdges = this.state.edges?.get() || [];\r\n    \r\n    if (this.areArraysEqual(currentNodes, newProps.nodes) && \r\n        this.areArraysEqual(currentEdges, newProps.edges)) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  private areArraysEqual(arr1: any[], arr2: any[]): boolean {\r\n    if (arr1.length !== arr2.length) return false;\r\n    \r\n    return arr1.every((item, index) => {\r\n      const item2 = arr2[index];\r\n      // Compare only essential properties\r\n      return item.id === item2.id && \r\n             item.label === item2.label &&\r\n             (item.ctxRenderer?.template === item2.ctxRenderer?.template);\r\n    });\r\n  }\r\n\r\n  private handleNodeUpdate(update: { nodeId: string; nodeData: any }) {\r\n    if (!this.state.nodes) return;\r\n\r\n    try {\r\n      // Get current position and selection state\r\n      const position = this.state.network?.getPosition(update.nodeId);\r\n      const isSelected = this.state.network?.getSelectedNodes().includes(update.nodeId);\r\n\r\n      // Update the node in the DataSet\r\n      this.state.nodes.update({\r\n        id: update.nodeId,\r\n        ...update.nodeData,\r\n        x: position?.x,\r\n        y: position?.y,\r\n        fixed: true  // Temporarily fix position\r\n      });\r\n\r\n      // Unfix position after a brief delay\r\n      setTimeout(() => {\r\n        this.state.nodes.update({\r\n          id: update.nodeId,\r\n          fixed: false\r\n        });\r\n      }, 100);\r\n\r\n      // Restore selection if needed\r\n      if (isSelected) {\r\n        this.state.network?.selectNodes([update.nodeId], true);\r\n      }\r\n\r\n      console.log(`Node ${update.nodeId} updated successfully`);\r\n    } catch (error) {\r\n      console.error(\"Error updating node:\", error);\r\n    }\r\n  }\r\n\r\n  private setupNetwork() {\r\n    if (!this.networkContainer.current) return;\r\n\r\n    const props = this.props.args as NetworkProps;\r\n    \r\n    // Create nodes with basic shapes first\r\n    const initialNodes = props.nodes.map(node => ({\r\n      ...node,\r\n      shape: 'box',  // Start with box shape\r\n      size: 40,\r\n      font: {\r\n        size: 14,\r\n        face: 'arial',\r\n        multi: true\r\n      },\r\n      margin: 10\r\n    }));\r\n\r\n    const nodes = new DataSet(initialNodes);\r\n    const edges = new DataSet(props.edges || []);\r\n\r\n    const mergedOptions = {\r\n      ...props.options,\r\n      nodes: {\r\n        shape: 'box',\r\n        font: {\r\n          size: 14,\r\n          face: 'arial',\r\n          multi: true\r\n        },\r\n        size: 40,\r\n        borderWidth: 2,\r\n        margin: 10\r\n      },\r\n      physics: {\r\n        enabled: false\r\n      }\r\n    };\r\n\r\n    const network = new Network(\r\n      this.networkContainer.current,\r\n      { nodes, edges },\r\n      mergedOptions\r\n    );\r\n\r\n    // Set up event handlers\r\n    network.on('select', (params) => {\r\n      Streamlit.setComponentValue({\r\n        selected: params.nodes,\r\n        positions: this.getNodePositions()\r\n      });\r\n    });\r\n\r\n    network.on('stabilized', () => {\r\n      console.log(\"Network stabilized\");\r\n      if (!this.state.isStabilized && props.viewport) {\r\n        network.moveTo({\r\n          position: props.viewport.position,\r\n          scale: props.viewport.scale,\r\n          animation: false\r\n        });\r\n        this.setState({ isStabilized: true, viewportInitialized: true });\r\n      }\r\n    });\r\n\r\n    network.on('dragEnd', () => {\r\n      if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n      }\r\n\r\n      this.viewportUpdateTimeout = setTimeout(() => {\r\n        if (this.state.isStabilized) {\r\n          Streamlit.setComponentValue({\r\n            selected: network.getSelectedNodes(),\r\n            positions: this.getNodePositions(),\r\n            viewport: {\r\n              scale: network.getScale(),\r\n              position: network.getViewPosition()\r\n            }\r\n          });\r\n        }\r\n      }, 100);\r\n    });\r\n\r\n    network.on('zoom', () => {\r\n      if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n      }\r\n\r\n      this.viewportUpdateTimeout = setTimeout(() => {\r\n        if (this.state.isStabilized) {\r\n          Streamlit.setComponentValue({\r\n            selected: network.getSelectedNodes(),\r\n            positions: this.getNodePositions(),\r\n            viewport: {\r\n              scale: network.getScale(),\r\n              position: network.getViewPosition()\r\n            }\r\n          });\r\n        }\r\n      }, 100);\r\n    });\r\n\r\n    this.setState({ network, nodes, edges });\r\n\r\n    // Handle background image if provided\r\n    if (props.background_image) {\r\n      this.setupBackgroundImage(props.background_image);\r\n    }\r\n\r\n    // After network is stable, update nodes with SVG\r\n    setTimeout(() => {\r\n      if (this.state.nodes) {\r\n        const updatedNodes = props.nodes.map(node => ({\r\n          ...node,\r\n          shape: 'custom',\r\n          ctxRenderer: {\r\n            template: node.ctxRenderer?.template || '',\r\n            size: node.ctxRenderer?.size || 40,\r\n            enableSVG: true,\r\n            svgScale: 1,\r\n            render: (ctx: CanvasRenderingContext2D, node: any) => {\r\n              if (!node.ctxRenderer?.template) return;\r\n              \r\n              try {\r\n                // Create SVG data URL\r\n                const svgBlob = new Blob([node.ctxRenderer.template], {type: 'image/svg+xml'});\r\n                const url = URL.createObjectURL(svgBlob);\r\n                \r\n                // Create and draw image\r\n                const img = new Image();\r\n                img.onload = () => {\r\n                  ctx.drawImage(\r\n                    img, \r\n                    -node.ctxRenderer.size/2, \r\n                    -node.ctxRenderer.size/2,\r\n                    node.ctxRenderer.size,\r\n                    node.ctxRenderer.size\r\n                  );\r\n                  URL.revokeObjectURL(url);\r\n                };\r\n                img.src = url;\r\n              } catch (error) {\r\n                console.error(\"Error rendering node SVG:\", error);\r\n              }\r\n            }\r\n          }\r\n        }));\r\n        this.state.nodes.update(updatedNodes);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  private getNodePositions() {\r\n    if (!this.state.network || !this.state.nodes) return {};\r\n    \r\n    const positions: { [key: string]: { x: number, y: number } } = {};\r\n    this.state.nodes.forEach((node) => {\r\n        const pos = this.state.network!.getPosition(node.id);\r\n        positions[node.id] = { x: pos.x, y: pos.y };\r\n    });\r\n    \r\n    return positions;\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this.state.network) {\r\n        this.state.network.destroy();\r\n    }\r\n    if (this.animationFrame) {\r\n        cancelAnimationFrame(this.animationFrame);\r\n    }\r\n    if (this.updateFrame) {\r\n        cancelAnimationFrame(this.updateFrame);\r\n    }\r\n    if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n    }\r\n  }\r\n\r\n  private setupBackgroundImage(imageUrl: string) {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      console.log(\"Background image loaded\", { width: img.width, height: img.height });\r\n      this.backgroundImage = img;\r\n      this.startRenderLoop();\r\n    };\r\n    img.onerror = (e) => {\r\n      console.error(\"Error loading background image:\", e);\r\n    };\r\n    img.src = imageUrl;\r\n  }\r\n\r\n  private startRenderLoop() {\r\n    if (this.animationFrame) {\r\n      cancelAnimationFrame(this.animationFrame);\r\n    }\r\n    this.renderBackground();\r\n  }\r\n\r\n  private renderBackground() {\r\n    if (!this.backgroundCanvas.current || !this.backgroundImage || !this.state.network) return;\r\n    \r\n    const canvas = this.backgroundCanvas.current;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Get current viewport state\r\n    const position = this.state.network.getViewPosition();\r\n    const scale = this.state.network.getScale();\r\n\r\n    // Ensure canvas dimensions match container\r\n    const containerRect = canvas.getBoundingClientRect();\r\n    canvas.width = containerRect.width;\r\n    canvas.height = containerRect.height;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Calculate dimensions based on scale\r\n    const srcWidth = canvas.width / scale;\r\n    const srcHeight = canvas.height / scale;\r\n    const imgCenterX = ((this.backgroundImage.width / 2) - srcWidth / 2) + position.x;\r\n    const imgCenterY = ((this.backgroundImage.height / 2) - srcHeight / 2) + position.y;\r\n\r\n    try {\r\n      ctx.drawImage(\r\n        this.backgroundImage,\r\n        imgCenterX,\r\n        imgCenterY,\r\n        srcWidth,\r\n        srcHeight,\r\n        0,\r\n        0,\r\n        canvas.width,\r\n        canvas.height\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error rendering background:\", error);\r\n    }\r\n\r\n    this.animationFrame = requestAnimationFrame(() => this.renderBackground());\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={{\r\n          width: '100%',\r\n          height: '600px',\r\n          position: 'relative',\r\n          border: '1px solid #ddd',\r\n          overflow: 'hidden'\r\n        }}\r\n      >\r\n        <canvas\r\n          ref={this.backgroundCanvas}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            zIndex: 0,\r\n            opacity: 0.3\r\n          }}\r\n        />\r\n        <div \r\n          ref={this.networkContainer}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            zIndex: 1\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(VisNetwork);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}