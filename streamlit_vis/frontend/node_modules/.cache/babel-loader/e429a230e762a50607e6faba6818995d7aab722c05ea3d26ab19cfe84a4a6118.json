{"ast":null,"code":"import React from'react';import{Network}from'vis-network';import{DataSet}from'vis-data';import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import{jsx as _jsx}from\"react/jsx-runtime\";class VisNetwork extends StreamlitComponentBase{constructor(){super(...arguments);this.container=/*#__PURE__*/React.createRef();this.backgroundCanvas=null;this.backgroundImage=null;this.animationFrameId=null;this.state={network:null,nodes:new DataSet([]),edges:new DataSet([]),prevProps:null};this.renderBackground=()=>{if(!this.backgroundCanvas||!this.backgroundImage||!this.state.network)return;const ctx=this.backgroundCanvas.getContext('2d');if(!ctx)return;// Get current network view state\nconst position=this.state.network.getViewPosition();const scale=this.state.network.getScale();// Calculate dimensions\nconst srcWidth=this.backgroundCanvas.width/scale;const srcHeight=this.backgroundCanvas.height/scale;const imgCenterX=this.backgroundImage.width/2-srcWidth/2+position.x;const imgCenterY=this.backgroundImage.height/2-srcHeight/2+position.y;// Clear and draw\nctx.clearRect(0,0,this.backgroundCanvas.width,this.backgroundCanvas.height);ctx.drawImage(this.backgroundImage,imgCenterX,imgCenterY,srcWidth,srcHeight,0,0,this.backgroundCanvas.width,this.backgroundCanvas.height);// Continue animation\nthis.animationFrameId=requestAnimationFrame(this.renderBackground);};}componentDidMount(){Streamlit.setFrameHeight(600);this.setupNetwork();}componentDidUpdate(){const props=this.props.args;const prevProps=this.state.prevProps;// Only update if props actually changed\nif(prevProps===null||JSON.stringify(prevProps.nodes)!==JSON.stringify(props.nodes)||JSON.stringify(prevProps.edges)!==JSON.stringify(props.edges)||prevProps.background_image!==props.background_image){if(props.background_image!==(prevProps===null||prevProps===void 0?void 0:prevProps.background_image)){this.setupBackground(props.background_image);}else{this.setupNetwork();}this.setState({prevProps:props});}}componentWillUnmount(){if(this.animationFrameId!==null){cancelAnimationFrame(this.animationFrameId);}if(this.state.network){this.state.network.destroy();}}setupBackground(backgroundImage){if(!this.container.current){console.log(\"Container not ready\");return;}console.log(\"Setting up background, image data present:\",!!backgroundImage);// Clear existing canvas if any\nif(this.backgroundCanvas){console.log(\"Removing existing canvas\");this.backgroundCanvas.remove();this.backgroundCanvas=null;}if(backgroundImage){console.log(\"Creating new canvas\");// Create canvas\nthis.backgroundCanvas=document.createElement('canvas');this.backgroundCanvas.style.position='absolute';this.backgroundCanvas.style.left='0px';this.backgroundCanvas.style.top='0px';this.backgroundCanvas.style.zIndex='-1';// Set canvas size\nthis.backgroundCanvas.width=this.container.current.clientWidth;this.backgroundCanvas.height=this.container.current.clientHeight;console.log(\"Canvas size:\",this.backgroundCanvas.width,this.backgroundCanvas.height);// Add canvas to container\nthis.container.current.appendChild(this.backgroundCanvas);// Create and load image\nthis.backgroundImage=new Image();this.backgroundImage.onload=()=>{console.log(\"Image loaded successfully\");console.log(\"Image size:\",this.backgroundImage.width,this.backgroundImage.height);this.startBackgroundRender();};this.backgroundImage.onerror=e=>{console.error(\"Error loading image:\",e);};// Set image source with base64 data\nconst imageUrl=backgroundImage.startsWith('data:image/')?backgroundImage:`data:image/png;base64,${backgroundImage}`;console.log(\"Setting image source, length:\",imageUrl.length);this.backgroundImage.src=imageUrl;}else{console.log(\"No background image provided\");}}componentDidUpdate(){const props=this.props.args;const prevProps=this.state.prevProps;console.log(\"Component updating\");console.log(\"Background image present:\",!!props.background_image);console.log(\"Previous background image present:\",!!(prevProps!==null&&prevProps!==void 0&&prevProps.background_image));// Only update if props actually changed\nif(prevProps===null||JSON.stringify(prevProps.nodes)!==JSON.stringify(props.nodes)||JSON.stringify(prevProps.edges)!==JSON.stringify(props.edges)||prevProps.background_image!==props.background_image){console.log(\"Props changed, updating component\");if(props.background_image!==(prevProps===null||prevProps===void 0?void 0:prevProps.background_image)){console.log(\"Background image changed, setting up new background\");this.setupBackground(props.background_image);}else{this.setupNetwork();}this.setState({prevProps:props});}}startBackgroundRender(){if(this.animationFrameId!==null){cancelAnimationFrame(this.animationFrameId);}this.renderBackground();}setupNetwork(){if(!this.container.current)return;const props=this.props.args;// Clear existing network\nif(this.state.network){this.state.network.destroy();}// Create new datasets\nconst nodes=new DataSet(props.nodes);const edges=new DataSet(props.edges);// Create network with merged options\nconst network=new Network(this.container.current,{nodes,edges},{...props.options,height:'600px',autoResize:true,layout:{randomSeed:1,improvedLayout:true}});// Set up event handlers\nnetwork.on('select',params=>{Streamlit.setComponentValue({selected:params.nodes,positions:this.getNodePositions()});});network.on('dragEnd',()=>{Streamlit.setComponentValue({selected:network.getSelectedNodes(),positions:this.getNodePositions()});});// Only fit once on initial creation\nif(!this.state.network){network.once('afterDrawing',()=>{network.fit();});}this.setState({network,nodes,edges},()=>{if(props.background_image){this.setupBackground(props.background_image);}});}getNodePositions(){if(!this.state.network||!this.state.nodes)return{};const positions={};this.state.nodes.forEach(node=>{const pos=this.state.network.getPosition(node.id);positions[node.id]={x:pos.x,y:pos.y};});return positions;}render(){return/*#__PURE__*/_jsx(\"div\",{ref:this.container,style:{width:'100%',height:'600px',minHeight:'600px',border:'1px solid #ddd',borderRadius:'4px',backgroundColor:'#ffffff',position:'relative',overflow:'hidden'}});}}export default withStreamlitConnection(VisNetwork);","map":{"version":3,"names":["React","Network","DataSet","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsx","_jsx","VisNetwork","constructor","arguments","container","createRef","backgroundCanvas","backgroundImage","animationFrameId","state","network","nodes","edges","prevProps","renderBackground","ctx","getContext","position","getViewPosition","scale","getScale","srcWidth","width","srcHeight","height","imgCenterX","x","imgCenterY","y","clearRect","drawImage","requestAnimationFrame","componentDidMount","setFrameHeight","setupNetwork","componentDidUpdate","props","args","JSON","stringify","background_image","setupBackground","setState","componentWillUnmount","cancelAnimationFrame","destroy","current","console","log","remove","document","createElement","style","left","top","zIndex","clientWidth","clientHeight","appendChild","Image","onload","startBackgroundRender","onerror","e","error","imageUrl","startsWith","length","src","options","autoResize","layout","randomSeed","improvedLayout","on","params","setComponentValue","selected","positions","getNodePositions","getSelectedNodes","once","fit","forEach","node","pos","getPosition","id","render","ref","minHeight","border","borderRadius","backgroundColor","overflow"],"sources":["C:/Users/owner/Documents/Innovative Dev/Sensor Sentry GUI - Streamlit/streamlit_vis/frontend/src/VisNetwork.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Network } from 'vis-network';\r\nimport { DataSet } from 'vis-data';\r\nimport {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\n\r\ninterface NetworkProps {\r\n  nodes: any[];\r\n  edges: any[];\r\n  options: any;\r\n  background_image?: string;\r\n  height?: string;\r\n}\r\n\r\ninterface State {\r\n  network: Network | null;\r\n  nodes: DataSet<any>;\r\n  edges: DataSet<any>;\r\n  prevProps: NetworkProps | null;\r\n}\r\n\r\nclass VisNetwork extends StreamlitComponentBase<State> {\r\n  private container = React.createRef<HTMLDivElement>();\r\n  private backgroundCanvas: HTMLCanvasElement | null = null;\r\n  private backgroundImage: HTMLImageElement | null = null;\r\n  private animationFrameId: number | null = null;\r\n  \r\n  public state: State = {\r\n    network: null,\r\n    nodes: new DataSet([]),\r\n    edges: new DataSet([]),\r\n    prevProps: null\r\n  };\r\n\r\n  public componentDidMount() {\r\n    Streamlit.setFrameHeight(600);\r\n    this.setupNetwork();\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    const props = this.props.args as NetworkProps;\r\n    const prevProps = this.state.prevProps;\r\n\r\n    // Only update if props actually changed\r\n    if (prevProps === null || \r\n        JSON.stringify(prevProps.nodes) !== JSON.stringify(props.nodes) ||\r\n        JSON.stringify(prevProps.edges) !== JSON.stringify(props.edges) ||\r\n        prevProps.background_image !== props.background_image) {\r\n      \r\n      if (props.background_image !== prevProps?.background_image) {\r\n        this.setupBackground(props.background_image);\r\n      } else {\r\n        this.setupNetwork();\r\n      }\r\n      \r\n      this.setState({ prevProps: props });\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this.animationFrameId !== null) {\r\n      cancelAnimationFrame(this.animationFrameId);\r\n    }\r\n    if (this.state.network) {\r\n      this.state.network.destroy();\r\n    }\r\n  }\r\n\r\n  private setupBackground(backgroundImage?: string) {\r\n    if (!this.container.current) {\r\n      console.log(\"Container not ready\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Setting up background, image data present:\", !!backgroundImage);\r\n\r\n    // Clear existing canvas if any\r\n    if (this.backgroundCanvas) {\r\n      console.log(\"Removing existing canvas\");\r\n      this.backgroundCanvas.remove();\r\n      this.backgroundCanvas = null;\r\n    }\r\n\r\n    if (backgroundImage) {\r\n      console.log(\"Creating new canvas\");\r\n      // Create canvas\r\n      this.backgroundCanvas = document.createElement('canvas');\r\n      this.backgroundCanvas.style.position = 'absolute';\r\n      this.backgroundCanvas.style.left = '0px';\r\n      this.backgroundCanvas.style.top = '0px';\r\n      this.backgroundCanvas.style.zIndex = '-1';\r\n      \r\n      // Set canvas size\r\n      this.backgroundCanvas.width = this.container.current.clientWidth;\r\n      this.backgroundCanvas.height = this.container.current.clientHeight;\r\n      console.log(\"Canvas size:\", this.backgroundCanvas.width, this.backgroundCanvas.height);\r\n      \r\n      // Add canvas to container\r\n      this.container.current.appendChild(this.backgroundCanvas);\r\n\r\n      // Create and load image\r\n      this.backgroundImage = new Image();\r\n      \r\n      this.backgroundImage.onload = () => {\r\n        console.log(\"Image loaded successfully\");\r\n        console.log(\"Image size:\", this.backgroundImage.width, this.backgroundImage.height);\r\n        this.startBackgroundRender();\r\n      };\r\n\r\n      this.backgroundImage.onerror = (e) => {\r\n        console.error(\"Error loading image:\", e);\r\n      };\r\n      \r\n      // Set image source with base64 data\r\n      const imageUrl = backgroundImage.startsWith('data:image/')\r\n        ? backgroundImage\r\n        : `data:image/png;base64,${backgroundImage}`;\r\n      \r\n      console.log(\"Setting image source, length:\", imageUrl.length);\r\n      this.backgroundImage.src = imageUrl;\r\n    } else {\r\n      console.log(\"No background image provided\");\r\n    }\r\n  }\r\n\r\n  private componentDidUpdate() {\r\n    const props = this.props.args as NetworkProps;\r\n    const prevProps = this.state.prevProps;\r\n\r\n    console.log(\"Component updating\");\r\n    console.log(\"Background image present:\", !!props.background_image);\r\n    console.log(\"Previous background image present:\", !!prevProps?.background_image);\r\n\r\n    // Only update if props actually changed\r\n    if (prevProps === null || \r\n        JSON.stringify(prevProps.nodes) !== JSON.stringify(props.nodes) ||\r\n        JSON.stringify(prevProps.edges) !== JSON.stringify(props.edges) ||\r\n        prevProps.background_image !== props.background_image) {\r\n      \r\n      console.log(\"Props changed, updating component\");\r\n      \r\n      if (props.background_image !== prevProps?.background_image) {\r\n        console.log(\"Background image changed, setting up new background\");\r\n        this.setupBackground(props.background_image);\r\n      } else {\r\n        this.setupNetwork();\r\n      }\r\n      \r\n      this.setState({ prevProps: props });\r\n    }\r\n  }\r\n\r\n  private renderBackground = () => {\r\n    if (!this.backgroundCanvas || !this.backgroundImage || !this.state.network) return;\r\n    \r\n    const ctx = this.backgroundCanvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Get current network view state\r\n    const position = this.state.network.getViewPosition();\r\n    const scale = this.state.network.getScale();\r\n\r\n    // Calculate dimensions\r\n    const srcWidth = this.backgroundCanvas.width / scale;\r\n    const srcHeight = this.backgroundCanvas.height / scale;\r\n    const imgCenterX = ((this.backgroundImage.width / 2) - srcWidth / 2) + position.x;\r\n    const imgCenterY = ((this.backgroundImage.height / 2) - srcHeight / 2) + position.y;\r\n\r\n    // Clear and draw\r\n    ctx.clearRect(0, 0, this.backgroundCanvas.width, this.backgroundCanvas.height);\r\n    ctx.drawImage(\r\n      this.backgroundImage,\r\n      imgCenterX,\r\n      imgCenterY,\r\n      srcWidth,\r\n      srcHeight,\r\n      0,\r\n      0,\r\n      this.backgroundCanvas.width,\r\n      this.backgroundCanvas.height\r\n    );\r\n\r\n    // Continue animation\r\n    this.animationFrameId = requestAnimationFrame(this.renderBackground);\r\n  };\r\n\r\n  private startBackgroundRender() {\r\n    if (this.animationFrameId !== null) {\r\n      cancelAnimationFrame(this.animationFrameId);\r\n    }\r\n    this.renderBackground();\r\n  }\r\n\r\n  private setupNetwork() {\r\n    if (!this.container.current) return;\r\n\r\n    const props = this.props.args as NetworkProps;\r\n\r\n    // Clear existing network\r\n    if (this.state.network) {\r\n      this.state.network.destroy();\r\n    }\r\n\r\n    // Create new datasets\r\n    const nodes = new DataSet(props.nodes);\r\n    const edges = new DataSet(props.edges);\r\n\r\n    // Create network with merged options\r\n    const network = new Network(\r\n      this.container.current,\r\n      { nodes, edges },\r\n      {\r\n        ...props.options,\r\n        height: '600px',\r\n        autoResize: true,\r\n        layout: {\r\n          randomSeed: 1,\r\n          improvedLayout: true\r\n        }\r\n      }\r\n    );\r\n\r\n    // Set up event handlers\r\n    network.on('select', (params) => {\r\n      Streamlit.setComponentValue({\r\n        selected: params.nodes,\r\n        positions: this.getNodePositions()\r\n      });\r\n    });\r\n\r\n    network.on('dragEnd', () => {\r\n      Streamlit.setComponentValue({\r\n        selected: network.getSelectedNodes(),\r\n        positions: this.getNodePositions()\r\n      });\r\n    });\r\n\r\n    // Only fit once on initial creation\r\n    if (!this.state.network) {\r\n      network.once('afterDrawing', () => {\r\n        network.fit();\r\n      });\r\n    }\r\n\r\n    this.setState({ network, nodes, edges }, () => {\r\n      if (props.background_image) {\r\n        this.setupBackground(props.background_image);\r\n      }\r\n    });\r\n  }\r\n\r\n  private getNodePositions() {\r\n    if (!this.state.network || !this.state.nodes) return {};\r\n    \r\n    const positions: { [key: string]: { x: number, y: number } } = {};\r\n    this.state.nodes.forEach((node) => {\r\n      const pos = this.state.network!.getPosition(node.id);\r\n      positions[node.id] = { x: pos.x, y: pos.y };\r\n    });\r\n    \r\n    return positions;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={{\r\n          width: '100%',\r\n          height: '600px',\r\n          minHeight: '600px',\r\n          border: '1px solid #ddd',\r\n          borderRadius: '4px',\r\n          backgroundColor: '#ffffff',\r\n          position: 'relative',\r\n          overflow: 'hidden'\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(VisNetwork);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,OAAO,KAAQ,aAAa,CACrC,OAASC,OAAO,KAAQ,UAAU,CAClC,OACEC,SAAS,CACTC,sBAAsB,CACtBC,uBAAuB,KAClB,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAiBjC,KAAM,CAAAC,UAAU,QAAS,CAAAJ,sBAA8B,CAAAK,YAAA,WAAAC,SAAA,OAC7CC,SAAS,cAAGX,KAAK,CAACY,SAAS,CAAiB,CAAC,MAC7CC,gBAAgB,CAA6B,IAAI,MACjDC,eAAe,CAA4B,IAAI,MAC/CC,gBAAgB,CAAkB,IAAI,MAEvCC,KAAK,CAAU,CACpBC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,GAAI,CAAAhB,OAAO,CAAC,EAAE,CAAC,CACtBiB,KAAK,CAAE,GAAI,CAAAjB,OAAO,CAAC,EAAE,CAAC,CACtBkB,SAAS,CAAE,IACb,CAAC,MAwHOC,gBAAgB,CAAG,IAAM,CAC/B,GAAI,CAAC,IAAI,CAACR,gBAAgB,EAAI,CAAC,IAAI,CAACC,eAAe,EAAI,CAAC,IAAI,CAACE,KAAK,CAACC,OAAO,CAAE,OAE5E,KAAM,CAAAK,GAAG,CAAG,IAAI,CAACT,gBAAgB,CAACU,UAAU,CAAC,IAAI,CAAC,CAClD,GAAI,CAACD,GAAG,CAAE,OAEV;AACA,KAAM,CAAAE,QAAQ,CAAG,IAAI,CAACR,KAAK,CAACC,OAAO,CAACQ,eAAe,CAAC,CAAC,CACrD,KAAM,CAAAC,KAAK,CAAG,IAAI,CAACV,KAAK,CAACC,OAAO,CAACU,QAAQ,CAAC,CAAC,CAE3C;AACA,KAAM,CAAAC,QAAQ,CAAG,IAAI,CAACf,gBAAgB,CAACgB,KAAK,CAAGH,KAAK,CACpD,KAAM,CAAAI,SAAS,CAAG,IAAI,CAACjB,gBAAgB,CAACkB,MAAM,CAAGL,KAAK,CACtD,KAAM,CAAAM,UAAU,CAAK,IAAI,CAAClB,eAAe,CAACe,KAAK,CAAG,CAAC,CAAID,QAAQ,CAAG,CAAC,CAAIJ,QAAQ,CAACS,CAAC,CACjF,KAAM,CAAAC,UAAU,CAAK,IAAI,CAACpB,eAAe,CAACiB,MAAM,CAAG,CAAC,CAAID,SAAS,CAAG,CAAC,CAAIN,QAAQ,CAACW,CAAC,CAEnF;AACAb,GAAG,CAACc,SAAS,CAAC,CAAC,CAAE,CAAC,CAAE,IAAI,CAACvB,gBAAgB,CAACgB,KAAK,CAAE,IAAI,CAAChB,gBAAgB,CAACkB,MAAM,CAAC,CAC9ET,GAAG,CAACe,SAAS,CACX,IAAI,CAACvB,eAAe,CACpBkB,UAAU,CACVE,UAAU,CACVN,QAAQ,CACRE,SAAS,CACT,CAAC,CACD,CAAC,CACD,IAAI,CAACjB,gBAAgB,CAACgB,KAAK,CAC3B,IAAI,CAAChB,gBAAgB,CAACkB,MACxB,CAAC,CAED;AACA,IAAI,CAAChB,gBAAgB,CAAGuB,qBAAqB,CAAC,IAAI,CAACjB,gBAAgB,CAAC,CACtE,CAAC,EAtJMkB,iBAAiBA,CAAA,CAAG,CACzBpC,SAAS,CAACqC,cAAc,CAAC,GAAG,CAAC,CAC7B,IAAI,CAACC,YAAY,CAAC,CAAC,CACrB,CAEOC,kBAAkBA,CAAA,CAAG,CAC1B,KAAM,CAAAC,KAAK,CAAG,IAAI,CAACA,KAAK,CAACC,IAAoB,CAC7C,KAAM,CAAAxB,SAAS,CAAG,IAAI,CAACJ,KAAK,CAACI,SAAS,CAEtC;AACA,GAAIA,SAAS,GAAK,IAAI,EAClByB,IAAI,CAACC,SAAS,CAAC1B,SAAS,CAACF,KAAK,CAAC,GAAK2B,IAAI,CAACC,SAAS,CAACH,KAAK,CAACzB,KAAK,CAAC,EAC/D2B,IAAI,CAACC,SAAS,CAAC1B,SAAS,CAACD,KAAK,CAAC,GAAK0B,IAAI,CAACC,SAAS,CAACH,KAAK,CAACxB,KAAK,CAAC,EAC/DC,SAAS,CAAC2B,gBAAgB,GAAKJ,KAAK,CAACI,gBAAgB,CAAE,CAEzD,GAAIJ,KAAK,CAACI,gBAAgB,IAAK3B,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAE2B,gBAAgB,EAAE,CAC1D,IAAI,CAACC,eAAe,CAACL,KAAK,CAACI,gBAAgB,CAAC,CAC9C,CAAC,IAAM,CACL,IAAI,CAACN,YAAY,CAAC,CAAC,CACrB,CAEA,IAAI,CAACQ,QAAQ,CAAC,CAAE7B,SAAS,CAAEuB,KAAM,CAAC,CAAC,CACrC,CACF,CAEOO,oBAAoBA,CAAA,CAAG,CAC5B,GAAI,IAAI,CAACnC,gBAAgB,GAAK,IAAI,CAAE,CAClCoC,oBAAoB,CAAC,IAAI,CAACpC,gBAAgB,CAAC,CAC7C,CACA,GAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAAE,CACtB,IAAI,CAACD,KAAK,CAACC,OAAO,CAACmC,OAAO,CAAC,CAAC,CAC9B,CACF,CAEQJ,eAAeA,CAAClC,eAAwB,CAAE,CAChD,GAAI,CAAC,IAAI,CAACH,SAAS,CAAC0C,OAAO,CAAE,CAC3BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAClC,OACF,CAEAD,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAE,CAAC,CAACzC,eAAe,CAAC,CAE5E;AACA,GAAI,IAAI,CAACD,gBAAgB,CAAE,CACzByC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACvC,IAAI,CAAC1C,gBAAgB,CAAC2C,MAAM,CAAC,CAAC,CAC9B,IAAI,CAAC3C,gBAAgB,CAAG,IAAI,CAC9B,CAEA,GAAIC,eAAe,CAAE,CACnBwC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAClC;AACA,IAAI,CAAC1C,gBAAgB,CAAG4C,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CACxD,IAAI,CAAC7C,gBAAgB,CAAC8C,KAAK,CAACnC,QAAQ,CAAG,UAAU,CACjD,IAAI,CAACX,gBAAgB,CAAC8C,KAAK,CAACC,IAAI,CAAG,KAAK,CACxC,IAAI,CAAC/C,gBAAgB,CAAC8C,KAAK,CAACE,GAAG,CAAG,KAAK,CACvC,IAAI,CAAChD,gBAAgB,CAAC8C,KAAK,CAACG,MAAM,CAAG,IAAI,CAEzC;AACA,IAAI,CAACjD,gBAAgB,CAACgB,KAAK,CAAG,IAAI,CAAClB,SAAS,CAAC0C,OAAO,CAACU,WAAW,CAChE,IAAI,CAAClD,gBAAgB,CAACkB,MAAM,CAAG,IAAI,CAACpB,SAAS,CAAC0C,OAAO,CAACW,YAAY,CAClEV,OAAO,CAACC,GAAG,CAAC,cAAc,CAAE,IAAI,CAAC1C,gBAAgB,CAACgB,KAAK,CAAE,IAAI,CAAChB,gBAAgB,CAACkB,MAAM,CAAC,CAEtF;AACA,IAAI,CAACpB,SAAS,CAAC0C,OAAO,CAACY,WAAW,CAAC,IAAI,CAACpD,gBAAgB,CAAC,CAEzD;AACA,IAAI,CAACC,eAAe,CAAG,GAAI,CAAAoD,KAAK,CAAC,CAAC,CAElC,IAAI,CAACpD,eAAe,CAACqD,MAAM,CAAG,IAAM,CAClCb,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CACxCD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAE,IAAI,CAACzC,eAAe,CAACe,KAAK,CAAE,IAAI,CAACf,eAAe,CAACiB,MAAM,CAAC,CACnF,IAAI,CAACqC,qBAAqB,CAAC,CAAC,CAC9B,CAAC,CAED,IAAI,CAACtD,eAAe,CAACuD,OAAO,CAAIC,CAAC,EAAK,CACpChB,OAAO,CAACiB,KAAK,CAAC,sBAAsB,CAAED,CAAC,CAAC,CAC1C,CAAC,CAED;AACA,KAAM,CAAAE,QAAQ,CAAG1D,eAAe,CAAC2D,UAAU,CAAC,aAAa,CAAC,CACtD3D,eAAe,CACf,yBAAyBA,eAAe,EAAE,CAE9CwC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAEiB,QAAQ,CAACE,MAAM,CAAC,CAC7D,IAAI,CAAC5D,eAAe,CAAC6D,GAAG,CAAGH,QAAQ,CACrC,CAAC,IAAM,CACLlB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC7C,CACF,CAEQb,kBAAkBA,CAAA,CAAG,CAC3B,KAAM,CAAAC,KAAK,CAAG,IAAI,CAACA,KAAK,CAACC,IAAoB,CAC7C,KAAM,CAAAxB,SAAS,CAAG,IAAI,CAACJ,KAAK,CAACI,SAAS,CAEtCkC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACjCD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAE,CAAC,CAACZ,KAAK,CAACI,gBAAgB,CAAC,CAClEO,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAE,CAAC,EAACnC,SAAS,SAATA,SAAS,WAATA,SAAS,CAAE2B,gBAAgB,EAAC,CAEhF;AACA,GAAI3B,SAAS,GAAK,IAAI,EAClByB,IAAI,CAACC,SAAS,CAAC1B,SAAS,CAACF,KAAK,CAAC,GAAK2B,IAAI,CAACC,SAAS,CAACH,KAAK,CAACzB,KAAK,CAAC,EAC/D2B,IAAI,CAACC,SAAS,CAAC1B,SAAS,CAACD,KAAK,CAAC,GAAK0B,IAAI,CAACC,SAAS,CAACH,KAAK,CAACxB,KAAK,CAAC,EAC/DC,SAAS,CAAC2B,gBAAgB,GAAKJ,KAAK,CAACI,gBAAgB,CAAE,CAEzDO,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAEhD,GAAIZ,KAAK,CAACI,gBAAgB,IAAK3B,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAE2B,gBAAgB,EAAE,CAC1DO,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC,CAClE,IAAI,CAACP,eAAe,CAACL,KAAK,CAACI,gBAAgB,CAAC,CAC9C,CAAC,IAAM,CACL,IAAI,CAACN,YAAY,CAAC,CAAC,CACrB,CAEA,IAAI,CAACQ,QAAQ,CAAC,CAAE7B,SAAS,CAAEuB,KAAM,CAAC,CAAC,CACrC,CACF,CAoCQyB,qBAAqBA,CAAA,CAAG,CAC9B,GAAI,IAAI,CAACrD,gBAAgB,GAAK,IAAI,CAAE,CAClCoC,oBAAoB,CAAC,IAAI,CAACpC,gBAAgB,CAAC,CAC7C,CACA,IAAI,CAACM,gBAAgB,CAAC,CAAC,CACzB,CAEQoB,YAAYA,CAAA,CAAG,CACrB,GAAI,CAAC,IAAI,CAAC9B,SAAS,CAAC0C,OAAO,CAAE,OAE7B,KAAM,CAAAV,KAAK,CAAG,IAAI,CAACA,KAAK,CAACC,IAAoB,CAE7C;AACA,GAAI,IAAI,CAAC5B,KAAK,CAACC,OAAO,CAAE,CACtB,IAAI,CAACD,KAAK,CAACC,OAAO,CAACmC,OAAO,CAAC,CAAC,CAC9B,CAEA;AACA,KAAM,CAAAlC,KAAK,CAAG,GAAI,CAAAhB,OAAO,CAACyC,KAAK,CAACzB,KAAK,CAAC,CACtC,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAjB,OAAO,CAACyC,KAAK,CAACxB,KAAK,CAAC,CAEtC;AACA,KAAM,CAAAF,OAAO,CAAG,GAAI,CAAAhB,OAAO,CACzB,IAAI,CAACU,SAAS,CAAC0C,OAAO,CACtB,CAAEnC,KAAK,CAAEC,KAAM,CAAC,CAChB,CACE,GAAGwB,KAAK,CAACiC,OAAO,CAChB7C,MAAM,CAAE,OAAO,CACf8C,UAAU,CAAE,IAAI,CAChBC,MAAM,CAAE,CACNC,UAAU,CAAE,CAAC,CACbC,cAAc,CAAE,IAClB,CACF,CACF,CAAC,CAED;AACA/D,OAAO,CAACgE,EAAE,CAAC,QAAQ,CAAGC,MAAM,EAAK,CAC/B/E,SAAS,CAACgF,iBAAiB,CAAC,CAC1BC,QAAQ,CAAEF,MAAM,CAAChE,KAAK,CACtBmE,SAAS,CAAE,IAAI,CAACC,gBAAgB,CAAC,CACnC,CAAC,CAAC,CACJ,CAAC,CAAC,CAEFrE,OAAO,CAACgE,EAAE,CAAC,SAAS,CAAE,IAAM,CAC1B9E,SAAS,CAACgF,iBAAiB,CAAC,CAC1BC,QAAQ,CAAEnE,OAAO,CAACsE,gBAAgB,CAAC,CAAC,CACpCF,SAAS,CAAE,IAAI,CAACC,gBAAgB,CAAC,CACnC,CAAC,CAAC,CACJ,CAAC,CAAC,CAEF;AACA,GAAI,CAAC,IAAI,CAACtE,KAAK,CAACC,OAAO,CAAE,CACvBA,OAAO,CAACuE,IAAI,CAAC,cAAc,CAAE,IAAM,CACjCvE,OAAO,CAACwE,GAAG,CAAC,CAAC,CACf,CAAC,CAAC,CACJ,CAEA,IAAI,CAACxC,QAAQ,CAAC,CAAEhC,OAAO,CAAEC,KAAK,CAAEC,KAAM,CAAC,CAAE,IAAM,CAC7C,GAAIwB,KAAK,CAACI,gBAAgB,CAAE,CAC1B,IAAI,CAACC,eAAe,CAACL,KAAK,CAACI,gBAAgB,CAAC,CAC9C,CACF,CAAC,CAAC,CACJ,CAEQuC,gBAAgBA,CAAA,CAAG,CACzB,GAAI,CAAC,IAAI,CAACtE,KAAK,CAACC,OAAO,EAAI,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,CAAE,MAAO,CAAC,CAAC,CAEvD,KAAM,CAAAmE,SAAsD,CAAG,CAAC,CAAC,CACjE,IAAI,CAACrE,KAAK,CAACE,KAAK,CAACwE,OAAO,CAAEC,IAAI,EAAK,CACjC,KAAM,CAAAC,GAAG,CAAG,IAAI,CAAC5E,KAAK,CAACC,OAAO,CAAE4E,WAAW,CAACF,IAAI,CAACG,EAAE,CAAC,CACpDT,SAAS,CAACM,IAAI,CAACG,EAAE,CAAC,CAAG,CAAE7D,CAAC,CAAE2D,GAAG,CAAC3D,CAAC,CAAEE,CAAC,CAAEyD,GAAG,CAACzD,CAAE,CAAC,CAC7C,CAAC,CAAC,CAEF,MAAO,CAAAkD,SAAS,CAClB,CAEOU,MAAMA,CAAA,CAAG,CACd,mBACExF,IAAA,QACEyF,GAAG,CAAE,IAAI,CAACrF,SAAU,CACpBgD,KAAK,CAAE,CACL9B,KAAK,CAAE,MAAM,CACbE,MAAM,CAAE,OAAO,CACfkE,SAAS,CAAE,OAAO,CAClBC,MAAM,CAAE,gBAAgB,CACxBC,YAAY,CAAE,KAAK,CACnBC,eAAe,CAAE,SAAS,CAC1B5E,QAAQ,CAAE,UAAU,CACpB6E,QAAQ,CAAE,QACZ,CAAE,CACH,CAAC,CAEN,CACF,CAEA,cAAe,CAAAhG,uBAAuB,CAACG,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}