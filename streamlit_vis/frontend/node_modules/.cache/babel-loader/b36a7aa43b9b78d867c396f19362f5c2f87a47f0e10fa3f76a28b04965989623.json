{"ast":null,"code":"import React from'react';import{Network}from'vis-network';import{DataSet}from'vis-data';import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";class VisNetwork extends StreamlitComponentBase{constructor(){super(...arguments);this.container=/*#__PURE__*/React.createRef();this.networkContainer=/*#__PURE__*/React.createRef();this.backgroundCanvas=/*#__PURE__*/React.createRef();this.backgroundImage=null;this.animationFrame=null;this.viewportUpdateTimeout=null;this.updateFrame=null;this.state={network:null,nodes:new DataSet([]),edges:new DataSet([]),viewportInitialized:false,isStabilized:false};}componentDidMount(){console.log(\"Component mounted\");Streamlit.setFrameHeight(600);this.setupNetwork();}componentDidUpdate(){const props=this.props.args;if(!this.state.network)return;// Handle single node updates (including SVG changes)\nif(props.updates){console.log(\"Processing node update with SVG:\",props.updates);const{nodeId,nodeData}=props.updates;if(!this.state.nodes)return;try{var _nodeData$ctxRenderer,_nodeData$ctxRenderer2;const position=this.state.network.getPosition(nodeId);const isSelected=this.state.network.getSelectedNodes().includes(nodeId);// Create update data preserving position and selection\nconst updateData={...nodeData,id:nodeId,x:position===null||position===void 0?void 0:position.x,y:position===null||position===void 0?void 0:position.y,fixed:true,shape:'custom',ctxRenderer:{template:((_nodeData$ctxRenderer=nodeData.ctxRenderer)===null||_nodeData$ctxRenderer===void 0?void 0:_nodeData$ctxRenderer.template)||'',size:((_nodeData$ctxRenderer2=nodeData.ctxRenderer)===null||_nodeData$ctxRenderer2===void 0?void 0:_nodeData$ctxRenderer2.size)||40}};// Update node\nthis.state.nodes.update(updateData);// Release position fix after brief delay\nsetTimeout(()=>{if(this.state.nodes){this.state.nodes.update({id:nodeId,fixed:false});}},100);// Restore selection if needed\nif(isSelected){this.state.network.selectNodes([nodeId],true);}// Force single redraw\nthis.state.network.redraw();}catch(error){console.error(\"Error updating node:\",error);}}// Otherwise handle full data updates\nelse if(props.nodes&&props.nodes.length>0){// Only update if we have nodes\nconsole.log(\"Processing full network update\");const nodes=new DataSet(props.nodes.map(node=>({...node,shape:'custom',// Ensure shape is set\nsize:node.size||40,font:{size:14,face:'arial',multi:true},margin:10})));const edges=new DataSet(props.edges||[]);// Preserve positions and selections\nconst positions=new Map();const selectedNodes=this.state.network.getSelectedNodes();this.state.nodes.forEach(node=>{const pos=this.state.network.getPosition(node.id);positions.set(node.id,pos);});// Apply positions while keeping SVG templates\nnodes.forEach(node=>{const pos=positions.get(node.id);if(pos){node.x=pos.x;node.y=pos.y;}});// Update network data\nthis.state.network.setData({nodes,edges});if(selectedNodes.length>0){this.state.network.selectNodes(selectedNodes,false);}}// Handle background image updates\nif(props.background_image&&(!this.backgroundImage||this.backgroundImage.src!==props.background_image)){this.setupBackgroundImage(props.background_image);}}// Add helper methods to prevent unnecessary updates\nshouldSkipFullUpdate(newProps){var _this$state$nodes,_this$state$edges;// Skip if nodes and edges haven't changed\nconst currentNodes=((_this$state$nodes=this.state.nodes)===null||_this$state$nodes===void 0?void 0:_this$state$nodes.get())||[];const currentEdges=((_this$state$edges=this.state.edges)===null||_this$state$edges===void 0?void 0:_this$state$edges.get())||[];if(this.areArraysEqual(currentNodes,newProps.nodes)&&this.areArraysEqual(currentEdges,newProps.edges)){return true;}return false;}areArraysEqual(arr1,arr2){if(arr1.length!==arr2.length)return false;return arr1.every((item,index)=>{var _item$ctxRenderer,_item2$ctxRenderer;const item2=arr2[index];// Compare only essential properties\nreturn item.id===item2.id&&item.label===item2.label&&((_item$ctxRenderer=item.ctxRenderer)===null||_item$ctxRenderer===void 0?void 0:_item$ctxRenderer.template)===((_item2$ctxRenderer=item2.ctxRenderer)===null||_item2$ctxRenderer===void 0?void 0:_item2$ctxRenderer.template);});}handleNodeUpdate(update){if(!this.state.nodes)return;try{var _this$state$network,_this$state$network2;// Get current position and selection state\nconst position=(_this$state$network=this.state.network)===null||_this$state$network===void 0?void 0:_this$state$network.getPosition(update.nodeId);const isSelected=(_this$state$network2=this.state.network)===null||_this$state$network2===void 0?void 0:_this$state$network2.getSelectedNodes().includes(update.nodeId);// Update the node in the DataSet\nthis.state.nodes.update({id:update.nodeId,...update.nodeData,x:position===null||position===void 0?void 0:position.x,y:position===null||position===void 0?void 0:position.y,fixed:true// Temporarily fix position\n});// Unfix position after a brief delay\nsetTimeout(()=>{this.state.nodes.update({id:update.nodeId,fixed:false});},100);// Restore selection if needed\nif(isSelected){var _this$state$network3;(_this$state$network3=this.state.network)===null||_this$state$network3===void 0?void 0:_this$state$network3.selectNodes([update.nodeId],true);}console.log(`Node ${update.nodeId} updated successfully`);}catch(error){console.error(\"Error updating node:\",error);}}setupNetwork(){if(!this.networkContainer.current)return;const props=this.props.args;const nodes=new DataSet(props.nodes);const edges=new DataSet(props.edges);// Create merged options with SVG support\nconst mergedOptions={...props.options,nodes:{...props.options.nodes,shape:'custom',// Enable custom shapes for all nodes\nctxRenderer:{// Add global SVG renderer\ntemplate:node=>{var _node$ctxRenderer;return((_node$ctxRenderer=node.ctxRenderer)===null||_node$ctxRenderer===void 0?void 0:_node$ctxRenderer.template)||'';},size:node=>{var _node$ctxRenderer2;return((_node$ctxRenderer2=node.ctxRenderer)===null||_node$ctxRenderer2===void 0?void 0:_node$ctxRenderer2.size)||40;}},font:{size:14,face:'arial',multi:true},size:40,borderWidth:2,margin:10},physics:{enabled:false}};const network=new Network(this.networkContainer.current,{nodes,edges},mergedOptions);// Set up event handlers\nnetwork.on('select',params=>{Streamlit.setComponentValue({selected:params.nodes,positions:this.getNodePositions()});});network.on('stabilized',()=>{console.log(\"Network stabilized\");if(!this.state.isStabilized&&props.viewport){network.moveTo({position:props.viewport.position,scale:props.viewport.scale,animation:false});this.setState({isStabilized:true,viewportInitialized:true});}});network.on('dragEnd',()=>{if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}this.viewportUpdateTimeout=setTimeout(()=>{if(this.state.isStabilized){Streamlit.setComponentValue({selected:network.getSelectedNodes(),positions:this.getNodePositions(),viewport:{scale:network.getScale(),position:network.getViewPosition()}});}},100);});network.on('zoom',()=>{if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}this.viewportUpdateTimeout=setTimeout(()=>{if(this.state.isStabilized){Streamlit.setComponentValue({selected:network.getSelectedNodes(),positions:this.getNodePositions(),viewport:{scale:network.getScale(),position:network.getViewPosition()}});}},100);});this.setState({network,nodes,edges});}getNodePositions(){if(!this.state.network||!this.state.nodes)return{};const positions={};this.state.nodes.forEach(node=>{const pos=this.state.network.getPosition(node.id);positions[node.id]={x:pos.x,y:pos.y};});return positions;}componentWillUnmount(){if(this.state.network){this.state.network.destroy();}if(this.animationFrame){cancelAnimationFrame(this.animationFrame);}if(this.updateFrame){cancelAnimationFrame(this.updateFrame);}if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}}setupBackgroundImage(imageUrl){const img=new Image();img.onload=()=>{console.log(\"Background image loaded\",{width:img.width,height:img.height});this.backgroundImage=img;this.startRenderLoop();};img.onerror=e=>{console.error(\"Error loading background image:\",e);};img.src=imageUrl;}startRenderLoop(){if(this.animationFrame){cancelAnimationFrame(this.animationFrame);}this.renderBackground();}renderBackground(){if(!this.backgroundCanvas.current||!this.backgroundImage||!this.state.network)return;const canvas=this.backgroundCanvas.current;const ctx=canvas.getContext('2d');if(!ctx)return;// Get current viewport state\nconst position=this.state.network.getViewPosition();const scale=this.state.network.getScale();// Ensure canvas dimensions match container\nconst containerRect=canvas.getBoundingClientRect();canvas.width=containerRect.width;canvas.height=containerRect.height;// Clear canvas\nctx.clearRect(0,0,canvas.width,canvas.height);// Calculate dimensions based on scale\nconst srcWidth=canvas.width/scale;const srcHeight=canvas.height/scale;const imgCenterX=this.backgroundImage.width/2-srcWidth/2+position.x;const imgCenterY=this.backgroundImage.height/2-srcHeight/2+position.y;try{ctx.drawImage(this.backgroundImage,imgCenterX,imgCenterY,srcWidth,srcHeight,0,0,canvas.width,canvas.height);}catch(error){console.error(\"Error rendering background:\",error);}this.animationFrame=requestAnimationFrame(()=>this.renderBackground());}render(){return/*#__PURE__*/_jsxs(\"div\",{ref:this.container,style:{width:'100%',height:'600px',position:'relative',border:'1px solid #ddd',overflow:'hidden'},children:[/*#__PURE__*/_jsx(\"canvas\",{ref:this.backgroundCanvas,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',zIndex:0,opacity:0.3}}),/*#__PURE__*/_jsx(\"div\",{ref:this.networkContainer,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',zIndex:1}})]});}}export default withStreamlitConnection(VisNetwork);","map":{"version":3,"names":["React","Network","DataSet","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsx","_jsx","jsxs","_jsxs","VisNetwork","constructor","arguments","container","createRef","networkContainer","backgroundCanvas","backgroundImage","animationFrame","viewportUpdateTimeout","updateFrame","state","network","nodes","edges","viewportInitialized","isStabilized","componentDidMount","console","log","setFrameHeight","setupNetwork","componentDidUpdate","props","args","updates","nodeId","nodeData","_nodeData$ctxRenderer","_nodeData$ctxRenderer2","position","getPosition","isSelected","getSelectedNodes","includes","updateData","id","x","y","fixed","shape","ctxRenderer","template","size","update","setTimeout","selectNodes","redraw","error","length","map","node","font","face","multi","margin","positions","Map","selectedNodes","forEach","pos","set","get","setData","background_image","src","setupBackgroundImage","shouldSkipFullUpdate","newProps","_this$state$nodes","_this$state$edges","currentNodes","currentEdges","areArraysEqual","arr1","arr2","every","item","index","_item$ctxRenderer","_item2$ctxRenderer","item2","label","handleNodeUpdate","_this$state$network","_this$state$network2","_this$state$network3","current","mergedOptions","options","_node$ctxRenderer","_node$ctxRenderer2","borderWidth","physics","enabled","on","params","setComponentValue","selected","getNodePositions","viewport","moveTo","scale","animation","setState","clearTimeout","getScale","getViewPosition","componentWillUnmount","destroy","cancelAnimationFrame","imageUrl","img","Image","onload","width","height","startRenderLoop","onerror","e","renderBackground","canvas","ctx","getContext","containerRect","getBoundingClientRect","clearRect","srcWidth","srcHeight","imgCenterX","imgCenterY","drawImage","requestAnimationFrame","render","ref","style","border","overflow","children","top","left","zIndex","opacity"],"sources":["C:/Users/owner/Documents/Innovative Dev/Sensor Sentry GUI - Streamlit/streamlit_vis/frontend/src/VisNetwork.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Network } from 'vis-network';\r\nimport { DataSet } from 'vis-data';\r\nimport {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\n\r\ninterface NetworkProps {\r\n  nodes: any[];\r\n  edges: any[];\r\n  options: any;\r\n  background_image?: string;\r\n  height?: string;\r\n  viewport?: {\r\n    position: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    scale: number;\r\n  };\r\n  updates?: {\r\n    nodeId: string;\r\n    nodeData: any;\r\n  };\r\n}\r\n\r\ninterface State {\r\n  network: Network | null;\r\n  nodes: DataSet<any>;\r\n  edges: DataSet<any>;\r\n  viewportInitialized: boolean;\r\n  isStabilized: boolean;\r\n}\r\n\r\nclass VisNetwork extends StreamlitComponentBase<State> {\r\n  private container = React.createRef<HTMLDivElement>();\r\n  private networkContainer = React.createRef<HTMLDivElement>();\r\n  private backgroundCanvas = React.createRef<HTMLCanvasElement>();\r\n  private backgroundImage: HTMLImageElement | null = null;\r\n  private animationFrame: number | null = null;\r\n  private viewportUpdateTimeout: NodeJS.Timeout | null = null;\r\n  private updateFrame: number | null = null;\r\n  \r\n  public state: State = {\r\n    network: null,\r\n    nodes: new DataSet([]),\r\n    edges: new DataSet([]),\r\n    viewportInitialized: false,\r\n    isStabilized: false\r\n  };\r\n\r\n  public componentDidMount() {\r\n    console.log(\"Component mounted\");\r\n    Streamlit.setFrameHeight(600);\r\n    this.setupNetwork();\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    const props = this.props.args as NetworkProps;\r\n    \r\n    if (!this.state.network) return;\r\n\r\n    // Handle single node updates (including SVG changes)\r\n    if (props.updates) {\r\n      console.log(\"Processing node update with SVG:\", props.updates);\r\n      const { nodeId, nodeData } = props.updates;\r\n      \r\n      if (!this.state.nodes) return;\r\n\r\n      try {\r\n        const position = this.state.network!.getPosition(nodeId);\r\n        const isSelected = this.state.network!.getSelectedNodes().includes(nodeId);\r\n        \r\n        // Create update data preserving position and selection\r\n        const updateData = {\r\n          ...nodeData,\r\n          id: nodeId,\r\n          x: position?.x,\r\n          y: position?.y,\r\n          fixed: true,\r\n          shape: 'custom',\r\n          ctxRenderer: {\r\n            template: nodeData.ctxRenderer?.template || '',\r\n            size: nodeData.ctxRenderer?.size || 40\r\n          }\r\n        };\r\n\r\n        // Update node\r\n        this.state.nodes.update(updateData);\r\n\r\n        // Release position fix after brief delay\r\n        setTimeout(() => {\r\n          if (this.state.nodes) {\r\n            this.state.nodes.update({\r\n              id: nodeId,\r\n              fixed: false\r\n            });\r\n          }\r\n        }, 100);\r\n\r\n        // Restore selection if needed\r\n        if (isSelected) {\r\n          this.state.network!.selectNodes([nodeId], true);\r\n        }\r\n\r\n        // Force single redraw\r\n        this.state.network!.redraw();\r\n      } catch (error) {\r\n        console.error(\"Error updating node:\", error);\r\n      }\r\n    }\r\n    // Otherwise handle full data updates\r\n    else if (props.nodes && props.nodes.length > 0) {  // Only update if we have nodes\r\n      console.log(\"Processing full network update\");\r\n      \r\n      const nodes = new DataSet(props.nodes.map(node => ({\r\n        ...node,\r\n        shape: 'custom',  // Ensure shape is set\r\n        size: node.size || 40,\r\n        font: {\r\n          size: 14,\r\n          face: 'arial',\r\n          multi: true\r\n        },\r\n        margin: 10\r\n      })));\r\n      const edges = new DataSet(props.edges || []);\r\n      \r\n      // Preserve positions and selections\r\n      const positions = new Map();\r\n      const selectedNodes = this.state.network.getSelectedNodes();\r\n      \r\n      this.state.nodes.forEach((node: any) => {\r\n        const pos = this.state.network!.getPosition(node.id);\r\n        positions.set(node.id, pos);\r\n      });\r\n\r\n      // Apply positions while keeping SVG templates\r\n      nodes.forEach((node: any) => {\r\n        const pos = positions.get(node.id);\r\n        if (pos) {\r\n          node.x = pos.x;\r\n          node.y = pos.y;\r\n        }\r\n      });\r\n\r\n      // Update network data\r\n      this.state.network.setData({ nodes, edges });\r\n      \r\n      if (selectedNodes.length > 0) {\r\n        this.state.network.selectNodes(selectedNodes, false);\r\n      }\r\n    }\r\n\r\n    // Handle background image updates\r\n    if (props.background_image && (!this.backgroundImage || this.backgroundImage.src !== props.background_image)) {\r\n      this.setupBackgroundImage(props.background_image);\r\n    }\r\n  }\r\n\r\n  // Add helper methods to prevent unnecessary updates\r\n  private shouldSkipFullUpdate(newProps: NetworkProps): boolean {\r\n    // Skip if nodes and edges haven't changed\r\n    const currentNodes = this.state.nodes?.get() || [];\r\n    const currentEdges = this.state.edges?.get() || [];\r\n    \r\n    if (this.areArraysEqual(currentNodes, newProps.nodes) && \r\n        this.areArraysEqual(currentEdges, newProps.edges)) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  private areArraysEqual(arr1: any[], arr2: any[]): boolean {\r\n    if (arr1.length !== arr2.length) return false;\r\n    \r\n    return arr1.every((item, index) => {\r\n      const item2 = arr2[index];\r\n      // Compare only essential properties\r\n      return item.id === item2.id && \r\n             item.label === item2.label &&\r\n             (item.ctxRenderer?.template === item2.ctxRenderer?.template);\r\n    });\r\n  }\r\n\r\n  private handleNodeUpdate(update: { nodeId: string; nodeData: any }) {\r\n    if (!this.state.nodes) return;\r\n\r\n    try {\r\n      // Get current position and selection state\r\n      const position = this.state.network?.getPosition(update.nodeId);\r\n      const isSelected = this.state.network?.getSelectedNodes().includes(update.nodeId);\r\n\r\n      // Update the node in the DataSet\r\n      this.state.nodes.update({\r\n        id: update.nodeId,\r\n        ...update.nodeData,\r\n        x: position?.x,\r\n        y: position?.y,\r\n        fixed: true  // Temporarily fix position\r\n      });\r\n\r\n      // Unfix position after a brief delay\r\n      setTimeout(() => {\r\n        this.state.nodes.update({\r\n          id: update.nodeId,\r\n          fixed: false\r\n        });\r\n      }, 100);\r\n\r\n      // Restore selection if needed\r\n      if (isSelected) {\r\n        this.state.network?.selectNodes([update.nodeId], true);\r\n      }\r\n\r\n      console.log(`Node ${update.nodeId} updated successfully`);\r\n    } catch (error) {\r\n      console.error(\"Error updating node:\", error);\r\n    }\r\n  }\r\n\r\n  private setupNetwork() {\r\n    if (!this.networkContainer.current) return;\r\n\r\n    const props = this.props.args as NetworkProps;\r\n    const nodes = new DataSet(props.nodes);\r\n    const edges = new DataSet(props.edges);\r\n\r\n    // Create merged options with SVG support\r\n    const mergedOptions = {\r\n      ...props.options,\r\n      nodes: {\r\n        ...props.options.nodes,\r\n        shape: 'custom',  // Enable custom shapes for all nodes\r\n        ctxRenderer: {  // Add global SVG renderer\r\n          template: (node: any) => {\r\n            return node.ctxRenderer?.template || '';\r\n          },\r\n          size: (node: any) => {\r\n            return node.ctxRenderer?.size || 40;\r\n          }\r\n        },\r\n        font: {\r\n          size: 14,\r\n          face: 'arial',\r\n          multi: true\r\n        },\r\n        size: 40,\r\n        borderWidth: 2,\r\n        margin: 10\r\n      },\r\n      physics: {\r\n        enabled: false\r\n      }\r\n    };\r\n\r\n    const network = new Network(\r\n      this.networkContainer.current,\r\n      { nodes, edges },\r\n      mergedOptions\r\n    );\r\n\r\n    // Set up event handlers\r\n    network.on('select', (params) => {\r\n      Streamlit.setComponentValue({\r\n        selected: params.nodes,\r\n        positions: this.getNodePositions()\r\n      });\r\n    });\r\n\r\n    network.on('stabilized', () => {\r\n      console.log(\"Network stabilized\");\r\n      if (!this.state.isStabilized && props.viewport) {\r\n        network.moveTo({\r\n          position: props.viewport.position,\r\n          scale: props.viewport.scale,\r\n          animation: false\r\n        });\r\n        this.setState({ isStabilized: true, viewportInitialized: true });\r\n      }\r\n    });\r\n\r\n    network.on('dragEnd', () => {\r\n      if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n      }\r\n\r\n      this.viewportUpdateTimeout = setTimeout(() => {\r\n        if (this.state.isStabilized) {\r\n          Streamlit.setComponentValue({\r\n            selected: network.getSelectedNodes(),\r\n            positions: this.getNodePositions(),\r\n            viewport: {\r\n              scale: network.getScale(),\r\n              position: network.getViewPosition()\r\n            }\r\n          });\r\n        }\r\n      }, 100);\r\n    });\r\n\r\n    network.on('zoom', () => {\r\n      if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n      }\r\n\r\n      this.viewportUpdateTimeout = setTimeout(() => {\r\n        if (this.state.isStabilized) {\r\n          Streamlit.setComponentValue({\r\n            selected: network.getSelectedNodes(),\r\n            positions: this.getNodePositions(),\r\n            viewport: {\r\n              scale: network.getScale(),\r\n              position: network.getViewPosition()\r\n            }\r\n          });\r\n        }\r\n      }, 100);\r\n    });\r\n\r\n    this.setState({ network, nodes, edges });\r\n  }\r\n\r\n  private getNodePositions() {\r\n    if (!this.state.network || !this.state.nodes) return {};\r\n    \r\n    const positions: { [key: string]: { x: number, y: number } } = {};\r\n    this.state.nodes.forEach((node) => {\r\n        const pos = this.state.network!.getPosition(node.id);\r\n        positions[node.id] = { x: pos.x, y: pos.y };\r\n    });\r\n    \r\n    return positions;\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this.state.network) {\r\n        this.state.network.destroy();\r\n    }\r\n    if (this.animationFrame) {\r\n        cancelAnimationFrame(this.animationFrame);\r\n    }\r\n    if (this.updateFrame) {\r\n        cancelAnimationFrame(this.updateFrame);\r\n    }\r\n    if (this.viewportUpdateTimeout) {\r\n        clearTimeout(this.viewportUpdateTimeout);\r\n    }\r\n  }\r\n\r\n  private setupBackgroundImage(imageUrl: string) {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      console.log(\"Background image loaded\", { width: img.width, height: img.height });\r\n      this.backgroundImage = img;\r\n      this.startRenderLoop();\r\n    };\r\n    img.onerror = (e) => {\r\n      console.error(\"Error loading background image:\", e);\r\n    };\r\n    img.src = imageUrl;\r\n  }\r\n\r\n  private startRenderLoop() {\r\n    if (this.animationFrame) {\r\n      cancelAnimationFrame(this.animationFrame);\r\n    }\r\n    this.renderBackground();\r\n  }\r\n\r\n  private renderBackground() {\r\n    if (!this.backgroundCanvas.current || !this.backgroundImage || !this.state.network) return;\r\n    \r\n    const canvas = this.backgroundCanvas.current;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Get current viewport state\r\n    const position = this.state.network.getViewPosition();\r\n    const scale = this.state.network.getScale();\r\n\r\n    // Ensure canvas dimensions match container\r\n    const containerRect = canvas.getBoundingClientRect();\r\n    canvas.width = containerRect.width;\r\n    canvas.height = containerRect.height;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Calculate dimensions based on scale\r\n    const srcWidth = canvas.width / scale;\r\n    const srcHeight = canvas.height / scale;\r\n    const imgCenterX = ((this.backgroundImage.width / 2) - srcWidth / 2) + position.x;\r\n    const imgCenterY = ((this.backgroundImage.height / 2) - srcHeight / 2) + position.y;\r\n\r\n    try {\r\n      ctx.drawImage(\r\n        this.backgroundImage,\r\n        imgCenterX,\r\n        imgCenterY,\r\n        srcWidth,\r\n        srcHeight,\r\n        0,\r\n        0,\r\n        canvas.width,\r\n        canvas.height\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error rendering background:\", error);\r\n    }\r\n\r\n    this.animationFrame = requestAnimationFrame(() => this.renderBackground());\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={{\r\n          width: '100%',\r\n          height: '600px',\r\n          position: 'relative',\r\n          border: '1px solid #ddd',\r\n          overflow: 'hidden'\r\n        }}\r\n      >\r\n        <canvas\r\n          ref={this.backgroundCanvas}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            zIndex: 0,\r\n            opacity: 0.3\r\n          }}\r\n        />\r\n        <div \r\n          ref={this.networkContainer}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            zIndex: 1\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(VisNetwork);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}