{"ast":null,"code":"export const createDeviceSVG=(node,state)=>{// Calculate bar heights based on values\nconst tempHeight=calculateBarHeight(state.temperature,0,50);// 0-50°C range\nconst humidHeight=calculateBarHeight(state.humidity,0,100);// 0-100% range\nconst doorHeight=calculateBarHeight(state.doorStatus==='OPEN'?100:0,0,100);// Calculate warning marker positions\nconst tempWarningHighY=200-calculateBarHeight(state.tempWarningHigh,0,50);const tempWarningLowY=200-calculateBarHeight(state.tempWarningLow,0,50);const tempCriticalHighY=200-calculateBarHeight(state.tempCriticalHigh,0,50);const tempCriticalLowY=200-calculateBarHeight(state.tempCriticalLow,0,50);const humidWarningHighY=200-calculateBarHeight(state.humidityWarningHigh,0,100);const humidWarningLowY=200-calculateBarHeight(state.humidityWarningLow,0,100);const doorTimeY=200-calculateBarHeight(state.doorTimeWarning,0,100);// Determine status colors\nconst tempColor=getStatusColor(state.temperature,state.tempWarningHigh,state.tempWarningLow,state.tempCriticalHigh,state.tempCriticalLow);const humidColor=getStatusColor(state.humidity,state.humidityWarningHigh,state.humidityWarningLow,state.humidityCriticalHigh,state.humidityCriticalLow);const doorColor=state.doorStatus==='OPEN'?'#ff4757':'#26de81';return`\n    <svg viewBox=\"0 0 240 340\" xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n            ${getGradientsAndFilters()}\n        </defs>\n\n        <!-- Main device body -->\n        <rect x=\"10\" y=\"10\" width=\"220\" height=\"320\" rx=\"15\"\n              fill=\"url(#metallic)\" stroke=\"#555\" stroke-width=\"2\"\n              filter=\"url(#shadow)\"/>\n\n        <!-- Panels -->\n        <rect x=\"20\" y=\"20\" width=\"200\" height=\"220\" rx=\"10\"\n              fill=\"url(#panelGradient)\"/>\n        <rect x=\"20\" y=\"250\" width=\"200\" height=\"70\" rx=\"10\"\n              fill=\"url(#panelGradient)\"/>\n\n        <!-- Bars -->\n        <g class=\"bars\">\n            <!-- Temperature Bar -->\n            <g transform=\"translate(35,25)\">\n                <rect class=\"bar-bg\" x=\"0\" y=\"0\" width=\"40\" height=\"200\" rx=\"3\"\n                      fill=\"#f0f0f0\" stroke=\"#666\" stroke-width=\"2\"/>\n                <rect class=\"bar-fill\" x=\"2\" y=\"${200-tempHeight}\" width=\"36\" height=\"${tempHeight}\" rx=\"2\"\n                      fill=\"${tempColor}\"/>\n                <!-- High warning/critical markers -->\n                <path d=\"M 20,${tempWarningHighY} l -5,-5 l 10,0 z\" fill=\"#ff9f43\"/>\n                <path d=\"M 20,${tempCriticalHighY} l -5,-5 l 10,0 z\" fill=\"#ff4757\"/>\n                <!-- Low warning/critical markers -->\n                <path d=\"M 20,${tempWarningLowY} l -5,5 l 10,0 z\" fill=\"#ff9f43\"/>\n                <path d=\"M 20,${tempCriticalLowY} l -5,5 l 10,0 z\" fill=\"#ff4757\"/>\n            </g>\n\n            <!-- Humidity Bar -->\n            <g transform=\"translate(100,25)\">\n                <rect class=\"bar-bg\" x=\"0\" y=\"0\" width=\"40\" height=\"200\" rx=\"3\"\n                      fill=\"#f0f0f0\" stroke=\"#666\" stroke-width=\"2\"/>\n                <rect class=\"bar-fill\" x=\"2\" y=\"${200-humidHeight}\" width=\"36\" height=\"${humidHeight}\" rx=\"2\"\n                      fill=\"${humidColor}\"/>\n                <!-- High/Low warning markers -->\n                <path d=\"M 20,${humidWarningHighY} l -5,-5 l 10,0 z\" fill=\"#ff9f43\"/>\n                <path d=\"M 20,${humidWarningLowY} l -5,5 l 10,0 z\" fill=\"#ff9f43\"/>\n            </g>\n\n            <!-- Door Time Bar -->\n            <g transform=\"translate(165,25)\">\n                <rect class=\"bar-bg\" x=\"0\" y=\"0\" width=\"40\" height=\"200\" rx=\"3\"\n                      fill=\"#f0f0f0\" stroke=\"#666\" stroke-width=\"2\"/>\n                <rect class=\"bar-fill\" x=\"2\" y=\"${200-doorHeight}\" width=\"36\" height=\"${doorHeight}\" rx=\"2\"\n                      fill=\"${doorColor}\"/>\n                <path d=\"M 20,${doorTimeY} l -5,-5 l 10,0 z\" fill=\"#ff4757\"/>\n            </g>\n        </g>\n\n        <!-- Reading Circles -->\n        <g class=\"readings\" transform=\"translate(0,285)\">\n            <!-- Temperature -->\n            <g transform=\"translate(55,0)\">\n                <circle r=\"18\" fill=\"${tempColor}\" stroke=\"#666\" stroke-width=\"1\"/>\n                <text y=\"5\" text-anchor=\"middle\" fill=\"white\" \n                      font-family=\"Arial\" font-weight=\"bold\">${state.temperature}°C</text>\n            </g>\n\n            <!-- Humidity -->\n            <g transform=\"translate(120,0)\">\n                <circle r=\"18\" fill=\"${humidColor}\" stroke=\"#666\" stroke-width=\"1\"/>\n                <text y=\"5\" text-anchor=\"middle\" fill=\"white\" \n                      font-family=\"Arial\" font-weight=\"bold\">${state.humidity}%</text>\n            </g>\n\n            <!-- Door Status -->\n            <g transform=\"translate(185,0)\">\n                <circle r=\"18\" fill=\"${doorColor}\" stroke=\"#666\" stroke-width=\"1\"/>\n                <text y=\"5\" text-anchor=\"middle\" fill=\"white\" \n                      font-family=\"Arial\" font-weight=\"bold\" font-size=\"smaller\">${state.doorStatus}</text>\n            </g>\n        </g>\n    </svg>`;};const calculateBarHeight=(value,min,max)=>{const percentage=(value-min)/(max-min);return Math.max(0,Math.min(1,percentage))*200;// 200 is the bar height\n};const getStatusColor=(value,warningHigh,warningLow,criticalHigh,criticalLow)=>{if(value>=criticalHigh||value<=criticalLow)return'#ff4757';// Red for critical\nif(value>=warningHigh||value<=warningLow)return'#ff9f43';// Orange for warning\nreturn'#26de81';// Green for normal\n};const getGradientsAndFilters=()=>`\n    <linearGradient id=\"metallic\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop offset=\"0%\" style=\"stop-color:#8a8a8a\" />\n        <stop offset=\"50%\" style=\"stop-color:#666666\" />\n        <stop offset=\"100%\" style=\"stop-color:#8a8a8a\" />\n    </linearGradient>\n\n    <linearGradient id=\"panelGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop offset=\"0%\" style=\"stop-color:#e0e0e0\" />\n        <stop offset=\"100%\" style=\"stop-color:#d0d0d0\" />\n    </linearGradient>\n\n    <filter id=\"shadow\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"120%\">\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"2\" />\n        <feOffset dx=\"1\" dy=\"1\" />\n        <feComposite in2=\"SourceAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n        <feComposite in2=\"SourceGraphic\" operator=\"over\" />\n    </filter>\n`;","map":{"version":3,"names":["createDeviceSVG","node","state","tempHeight","calculateBarHeight","temperature","humidHeight","humidity","doorHeight","doorStatus","tempWarningHighY","tempWarningHigh","tempWarningLowY","tempWarningLow","tempCriticalHighY","tempCriticalHigh","tempCriticalLowY","tempCriticalLow","humidWarningHighY","humidityWarningHigh","humidWarningLowY","humidityWarningLow","doorTimeY","doorTimeWarning","tempColor","getStatusColor","humidColor","humidityCriticalHigh","humidityCriticalLow","doorColor","getGradientsAndFilters","value","min","max","percentage","Math","warningHigh","warningLow","criticalHigh","criticalLow"],"sources":["C:/Users/owner/Documents/Innovative Dev/Sensor Sentry GUI - Streamlit/streamlit_vis/frontend/src/deviceRenderer.ts"],"sourcesContent":["import { Node } from 'vis-network';\n\ninterface DeviceState {\n    temperature: number;\n    humidity: number;\n    doorStatus: string;\n    tempWarningHigh: number;\n    tempWarningLow: number;\n    tempCriticalHigh: number;\n    tempCriticalLow: number;\n    humidityWarningHigh: number;\n    humidityWarningLow: number;\n    humidityCriticalHigh: number;\n    humidityCriticalLow: number;\n    doorTimeWarning: number;\n}\n\nexport const createDeviceSVG = (node: Node, state: DeviceState): string => {\n    // Calculate bar heights based on values\n    const tempHeight = calculateBarHeight(state.temperature, 0, 50); // 0-50°C range\n    const humidHeight = calculateBarHeight(state.humidity, 0, 100); // 0-100% range\n    const doorHeight = calculateBarHeight(state.doorStatus === 'OPEN' ? 100 : 0, 0, 100);\n\n    // Calculate warning marker positions\n    const tempWarningHighY = 200 - calculateBarHeight(state.tempWarningHigh, 0, 50);\n    const tempWarningLowY = 200 - calculateBarHeight(state.tempWarningLow, 0, 50);\n    const tempCriticalHighY = 200 - calculateBarHeight(state.tempCriticalHigh, 0, 50);\n    const tempCriticalLowY = 200 - calculateBarHeight(state.tempCriticalLow, 0, 50);\n    const humidWarningHighY = 200 - calculateBarHeight(state.humidityWarningHigh, 0, 100);\n    const humidWarningLowY = 200 - calculateBarHeight(state.humidityWarningLow, 0, 100);\n    const doorTimeY = 200 - calculateBarHeight(state.doorTimeWarning, 0, 100);\n\n    // Determine status colors\n    const tempColor = getStatusColor(\n        state.temperature,\n        state.tempWarningHigh,\n        state.tempWarningLow,\n        state.tempCriticalHigh,\n        state.tempCriticalLow\n    );\n    const humidColor = getStatusColor(\n        state.humidity,\n        state.humidityWarningHigh,\n        state.humidityWarningLow,\n        state.humidityCriticalHigh,\n        state.humidityCriticalLow\n    );\n    const doorColor = state.doorStatus === 'OPEN' ? '#ff4757' : '#26de81';\n\n    return `\n    <svg viewBox=\"0 0 240 340\" xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n            ${getGradientsAndFilters()}\n        </defs>\n\n        <!-- Main device body -->\n        <rect x=\"10\" y=\"10\" width=\"220\" height=\"320\" rx=\"15\"\n              fill=\"url(#metallic)\" stroke=\"#555\" stroke-width=\"2\"\n              filter=\"url(#shadow)\"/>\n\n        <!-- Panels -->\n        <rect x=\"20\" y=\"20\" width=\"200\" height=\"220\" rx=\"10\"\n              fill=\"url(#panelGradient)\"/>\n        <rect x=\"20\" y=\"250\" width=\"200\" height=\"70\" rx=\"10\"\n              fill=\"url(#panelGradient)\"/>\n\n        <!-- Bars -->\n        <g class=\"bars\">\n            <!-- Temperature Bar -->\n            <g transform=\"translate(35,25)\">\n                <rect class=\"bar-bg\" x=\"0\" y=\"0\" width=\"40\" height=\"200\" rx=\"3\"\n                      fill=\"#f0f0f0\" stroke=\"#666\" stroke-width=\"2\"/>\n                <rect class=\"bar-fill\" x=\"2\" y=\"${200 - tempHeight}\" width=\"36\" height=\"${tempHeight}\" rx=\"2\"\n                      fill=\"${tempColor}\"/>\n                <!-- High warning/critical markers -->\n                <path d=\"M 20,${tempWarningHighY} l -5,-5 l 10,0 z\" fill=\"#ff9f43\"/>\n                <path d=\"M 20,${tempCriticalHighY} l -5,-5 l 10,0 z\" fill=\"#ff4757\"/>\n                <!-- Low warning/critical markers -->\n                <path d=\"M 20,${tempWarningLowY} l -5,5 l 10,0 z\" fill=\"#ff9f43\"/>\n                <path d=\"M 20,${tempCriticalLowY} l -5,5 l 10,0 z\" fill=\"#ff4757\"/>\n            </g>\n\n            <!-- Humidity Bar -->\n            <g transform=\"translate(100,25)\">\n                <rect class=\"bar-bg\" x=\"0\" y=\"0\" width=\"40\" height=\"200\" rx=\"3\"\n                      fill=\"#f0f0f0\" stroke=\"#666\" stroke-width=\"2\"/>\n                <rect class=\"bar-fill\" x=\"2\" y=\"${200 - humidHeight}\" width=\"36\" height=\"${humidHeight}\" rx=\"2\"\n                      fill=\"${humidColor}\"/>\n                <!-- High/Low warning markers -->\n                <path d=\"M 20,${humidWarningHighY} l -5,-5 l 10,0 z\" fill=\"#ff9f43\"/>\n                <path d=\"M 20,${humidWarningLowY} l -5,5 l 10,0 z\" fill=\"#ff9f43\"/>\n            </g>\n\n            <!-- Door Time Bar -->\n            <g transform=\"translate(165,25)\">\n                <rect class=\"bar-bg\" x=\"0\" y=\"0\" width=\"40\" height=\"200\" rx=\"3\"\n                      fill=\"#f0f0f0\" stroke=\"#666\" stroke-width=\"2\"/>\n                <rect class=\"bar-fill\" x=\"2\" y=\"${200 - doorHeight}\" width=\"36\" height=\"${doorHeight}\" rx=\"2\"\n                      fill=\"${doorColor}\"/>\n                <path d=\"M 20,${doorTimeY} l -5,-5 l 10,0 z\" fill=\"#ff4757\"/>\n            </g>\n        </g>\n\n        <!-- Reading Circles -->\n        <g class=\"readings\" transform=\"translate(0,285)\">\n            <!-- Temperature -->\n            <g transform=\"translate(55,0)\">\n                <circle r=\"18\" fill=\"${tempColor}\" stroke=\"#666\" stroke-width=\"1\"/>\n                <text y=\"5\" text-anchor=\"middle\" fill=\"white\" \n                      font-family=\"Arial\" font-weight=\"bold\">${state.temperature}°C</text>\n            </g>\n\n            <!-- Humidity -->\n            <g transform=\"translate(120,0)\">\n                <circle r=\"18\" fill=\"${humidColor}\" stroke=\"#666\" stroke-width=\"1\"/>\n                <text y=\"5\" text-anchor=\"middle\" fill=\"white\" \n                      font-family=\"Arial\" font-weight=\"bold\">${state.humidity}%</text>\n            </g>\n\n            <!-- Door Status -->\n            <g transform=\"translate(185,0)\">\n                <circle r=\"18\" fill=\"${doorColor}\" stroke=\"#666\" stroke-width=\"1\"/>\n                <text y=\"5\" text-anchor=\"middle\" fill=\"white\" \n                      font-family=\"Arial\" font-weight=\"bold\" font-size=\"smaller\">${state.doorStatus}</text>\n            </g>\n        </g>\n    </svg>`;\n};\n\nconst calculateBarHeight = (value: number, min: number, max: number): number => {\n    const percentage = (value - min) / (max - min);\n    return Math.max(0, Math.min(1, percentage)) * 200; // 200 is the bar height\n};\n\nconst getStatusColor = (value: number, warningHigh: number, warningLow: number, criticalHigh: number, criticalLow: number): string => {\n    if (value >= criticalHigh || value <= criticalLow) return '#ff4757';  // Red for critical\n    if (value >= warningHigh || value <= warningLow) return '#ff9f43';    // Orange for warning\n    return '#26de81';  // Green for normal\n};\n\nconst getGradientsAndFilters = (): string => `\n    <linearGradient id=\"metallic\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop offset=\"0%\" style=\"stop-color:#8a8a8a\" />\n        <stop offset=\"50%\" style=\"stop-color:#666666\" />\n        <stop offset=\"100%\" style=\"stop-color:#8a8a8a\" />\n    </linearGradient>\n\n    <linearGradient id=\"panelGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop offset=\"0%\" style=\"stop-color:#e0e0e0\" />\n        <stop offset=\"100%\" style=\"stop-color:#d0d0d0\" />\n    </linearGradient>\n\n    <filter id=\"shadow\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"120%\">\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"2\" />\n        <feOffset dx=\"1\" dy=\"1\" />\n        <feComposite in2=\"SourceAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n        <feComposite in2=\"SourceGraphic\" operator=\"over\" />\n    </filter>\n`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}