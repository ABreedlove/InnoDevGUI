{"ast":null,"code":"import React from'react';import{Network}from'vis-network';import{DataSet}from'vis-data';import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import{createDeviceSVG}from'./deviceRenderer';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DEBUG=true;class VisNetwork extends StreamlitComponentBase{constructor(){super(...arguments);this.container=/*#__PURE__*/React.createRef();this.networkContainer=/*#__PURE__*/React.createRef();this.backgroundCanvas=/*#__PURE__*/React.createRef();this.backgroundImage=null;this.animationFrame=null;this.viewportUpdateTimeout=null;this.state={network:null,nodes:new DataSet([]),edges:new DataSet([]),viewportInitialized:false,isStabilized:false};}componentDidMount(){console.log(\"Component mounted\");Streamlit.setFrameHeight(600);this.setupNetwork();}componentDidUpdate(){const props=this.props.args;console.log(\"Component update received - nodes:\",props.nodes);// Debug\n// Handle network data updates with SVG processing\nif(this.state.network){const processedNodes=props.nodes.map(node=>({...node,shape:'image',image:`data:image/svg+xml;charset=utf-8,${encodeURIComponent(createDeviceSVG(node,node.state))}`,size:node.size||60,fixed:{x:true,y:true}}));const nodes=new DataSet(processedNodes);const edges=new DataSet(props.edges);this.state.network.setData({nodes,edges});}// Handle background image updates\nif(props.background_image&&(!this.backgroundImage||this.backgroundImage.src!==props.background_image)){this.setupBackgroundImage(props.background_image);}}setupNetwork(){if(!this.networkContainer.current)return;const props=this.props.args;if(DEBUG)console.log('Setting up network with props:',props);// Process nodes to add SVG representation\nconst processedNodes=props.nodes.map(node=>({...node,shape:'image',image:`data:image/svg+xml;charset=utf-8,${encodeURIComponent(createDeviceSVG(node,node.state))}`,size:node.size||60,fixed:{x:true,y:true}}));const nodes=new DataSet(processedNodes);const edges=new DataSet(props.edges);const network=new Network(this.networkContainer.current,{nodes,edges},props.options);// Override the fit method to prevent automatic fitting\nconst originalFit=network.fit.bind(network);network.fit=function(){console.log(\"Preventing automatic fit\");return;};// Handle dragging by temporarily unfixing nodes\nnetwork.on('dragStart',params=>{if(DEBUG)console.log('DragStart event');if(params.nodes&&params.nodes.length>0){params.nodes.forEach(nodeId=>{nodes.update({id:nodeId,fixed:{x:false,y:false}});});}});network.on('dragEnd',params=>{if(DEBUG)console.log('DragEnd event:',params);if(params.nodes&&params.nodes.length>0){params.nodes.forEach(nodeId=>{nodes.update({id:nodeId,fixed:{x:true,y:true}});});// Send position update\nconst positions=this.getNodePositions();if(DEBUG)console.log('Node positions:',positions);const value={positions:positions,type:'position'};if(DEBUG)console.log('Sending dragEnd value:',value);Streamlit.setComponentValue(value);}});// Set initial viewport immediately\nif(props.viewport){console.log(\"Setting initial viewport:\",props.viewport);requestAnimationFrame(()=>{network.moveTo({position:props.viewport.position,scale:props.viewport.scale,animation:false});});}// Selection handler - ONLY send selection\nnetwork.on('select',params=>{if(DEBUG)console.log('Select event:',params);const value={selected:params.nodes,type:'selection'};if(DEBUG)console.log('Sending select value:',value);Streamlit.setComponentValue(value);});// Viewport handler - ONLY send viewport\nnetwork.on('zoom',()=>{if(DEBUG)console.log('Zoom event');if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}this.viewportUpdateTimeout=setTimeout(()=>{const value={viewport:{scale:network.getScale(),position:network.getViewPosition()},type:'viewport'};if(DEBUG)console.log('Sending zoom value:',value);Streamlit.setComponentValue(value);},100);});// Add click handler to ensure drag events work properly\nnetwork.on('click',()=>{if(DEBUG)console.log('Click event');});// Add dragStart handler to ensure drag events work properly\n// network.on('dragStart', () => {\n//   if (DEBUG) console.log('DragStart event');\n// });\nnetwork.on('stabilized',()=>{if(DEBUG)console.log(\"Network stabilized\");this.setState({isStabilized:true});});this.setState({network,nodes,edges,isStabilized:true});// Set stabilized to true immediately\n}getNodePositions(){if(!this.state.network||!this.state.nodes)return{};const positions={};this.state.nodes.forEach(node=>{const pos=this.state.network.getPosition(node.id);if(DEBUG)console.log(`Position for ${node.id}:`,pos);positions[node.id]={x:pos.x,y:pos.y};});return positions;}componentWillUnmount(){if(this.state.network){this.state.network.destroy();}if(this.animationFrame){cancelAnimationFrame(this.animationFrame);}if(this.viewportUpdateTimeout){clearTimeout(this.viewportUpdateTimeout);}}setupBackgroundImage(imageUrl){const img=new Image();img.onload=()=>{console.log(\"Background image loaded\",{width:img.width,height:img.height});this.backgroundImage=img;this.startRenderLoop();};img.onerror=e=>{console.error(\"Error loading background image:\",e);};img.src=imageUrl;}startRenderLoop(){if(this.animationFrame){cancelAnimationFrame(this.animationFrame);}this.renderBackground();}renderBackground(){if(!this.backgroundCanvas.current||!this.backgroundImage||!this.state.network)return;const canvas=this.backgroundCanvas.current;const ctx=canvas.getContext('2d');if(!ctx)return;// Get current viewport state\nconst position=this.state.network.getViewPosition();const scale=this.state.network.getScale();// Ensure canvas dimensions match container\nconst containerRect=canvas.getBoundingClientRect();canvas.width=containerRect.width;canvas.height=containerRect.height;// Clear canvas\nctx.clearRect(0,0,canvas.width,canvas.height);// Calculate dimensions based on scale\nconst srcWidth=canvas.width/scale;const srcHeight=canvas.height/scale;const imgCenterX=this.backgroundImage.width/2-srcWidth/2+position.x;const imgCenterY=this.backgroundImage.height/2-srcHeight/2+position.y;try{ctx.drawImage(this.backgroundImage,imgCenterX,imgCenterY,srcWidth,srcHeight,0,0,canvas.width,canvas.height);}catch(error){console.error(\"Error rendering background:\",error);}this.animationFrame=requestAnimationFrame(()=>this.renderBackground());}render(){return/*#__PURE__*/_jsxs(\"div\",{ref:this.container,style:{width:'100%',height:'600px',position:'relative',border:'1px solid #ddd',overflow:'hidden'},children:[/*#__PURE__*/_jsx(\"canvas\",{ref:this.backgroundCanvas,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',zIndex:0,opacity:0.3}}),/*#__PURE__*/_jsx(\"div\",{ref:this.networkContainer,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%',zIndex:1}})]});}}export default withStreamlitConnection(VisNetwork);","map":{"version":3,"names":["React","Network","DataSet","Streamlit","StreamlitComponentBase","withStreamlitConnection","createDeviceSVG","jsx","_jsx","jsxs","_jsxs","DEBUG","VisNetwork","constructor","arguments","container","createRef","networkContainer","backgroundCanvas","backgroundImage","animationFrame","viewportUpdateTimeout","state","network","nodes","edges","viewportInitialized","isStabilized","componentDidMount","console","log","setFrameHeight","setupNetwork","componentDidUpdate","props","args","processedNodes","map","node","shape","image","encodeURIComponent","size","fixed","x","y","setData","background_image","src","setupBackgroundImage","current","options","originalFit","fit","bind","on","params","length","forEach","nodeId","update","id","positions","getNodePositions","value","type","setComponentValue","viewport","requestAnimationFrame","moveTo","position","scale","animation","selected","clearTimeout","setTimeout","getScale","getViewPosition","setState","pos","getPosition","componentWillUnmount","destroy","cancelAnimationFrame","imageUrl","img","Image","onload","width","height","startRenderLoop","onerror","e","error","renderBackground","canvas","ctx","getContext","containerRect","getBoundingClientRect","clearRect","srcWidth","srcHeight","imgCenterX","imgCenterY","drawImage","render","ref","style","border","overflow","children","top","left","zIndex","opacity"],"sources":["C:/Users/owner/Documents/Innovative Dev/Sensor Sentry GUI - Streamlit/streamlit_vis/frontend/src/VisNetwork.tsx"],"sourcesContent":["import React from 'react';\nimport { Network } from 'vis-network';\nimport { DataSet } from 'vis-data';\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport { createDeviceSVG } from './deviceRenderer';\nconst DEBUG = true;\n\ninterface NetworkProps {\n  nodes: any[];\n  edges: any[];\n  options: any;\n  background_image?: string;\n  height?: string;\n  viewport?: {\n    position: {\n      x: number;\n      y: number;\n    };\n    scale: number;\n  };\n}\n\ninterface State {\n  network: Network | null;\n  nodes: DataSet<any>;\n  edges: DataSet<any>;\n  viewportInitialized: boolean;\n  isStabilized: boolean;\n}\n\nclass VisNetwork extends StreamlitComponentBase<State> {\n  private container = React.createRef<HTMLDivElement>();\n  private networkContainer = React.createRef<HTMLDivElement>();\n  private backgroundCanvas = React.createRef<HTMLCanvasElement>();\n  private backgroundImage: HTMLImageElement | null = null;\n  private animationFrame: number | null = null;\n  private viewportUpdateTimeout: NodeJS.Timeout | null = null;\n  \n  public state: State = {\n    network: null,\n    nodes: new DataSet([]),\n    edges: new DataSet([]),\n    viewportInitialized: false,\n    isStabilized: false\n  };\n\n  public componentDidMount() {\n    console.log(\"Component mounted\");\n    Streamlit.setFrameHeight(600);\n    this.setupNetwork();\n  }\n\n  public componentDidUpdate() {\n    const props = this.props.args as NetworkProps;\n    \n    console.log(\"Component update received - nodes:\", props.nodes);  // Debug\n\n    // Handle network data updates with SVG processing\n    if (this.state.network) {\n      const processedNodes = props.nodes.map(node => ({\n        ...node,\n        shape: 'image',\n        image: `data:image/svg+xml;charset=utf-8,${encodeURIComponent(\n          createDeviceSVG(node, node.state)\n        )}`,\n        size: node.size || 60,\n        fixed: {\n          x: true,\n          y: true\n        }\n      }));\n\n      const nodes = new DataSet(processedNodes);\n      const edges = new DataSet(props.edges);\n      this.state.network.setData({ nodes, edges });\n    }\n\n    // Handle background image updates\n    if (props.background_image && (!this.backgroundImage || this.backgroundImage.src !== props.background_image)) {\n      this.setupBackgroundImage(props.background_image);\n    }\n  }\n\n  private setupNetwork() {\n    if (!this.networkContainer.current) return;\n\n    const props = this.props.args as NetworkProps;\n    \n    if (DEBUG) console.log('Setting up network with props:', props);\n    \n    // Process nodes to add SVG representation\n    const processedNodes = props.nodes.map(node => ({\n      ...node,\n      shape: 'image',\n      image: `data:image/svg+xml;charset=utf-8,${encodeURIComponent(\n        createDeviceSVG(node, node.state)\n      )}`,\n      size: node.size || 60,\n      fixed: {\n        x: true,\n        y: true\n      }\n    }));\n\n    const nodes = new DataSet(processedNodes);\n    const edges = new DataSet(props.edges);\n\n    const network = new Network(\n      this.networkContainer.current,\n      { nodes, edges },\n      props.options\n    );\n\n    // Override the fit method to prevent automatic fitting\n    const originalFit = network.fit.bind(network);\n    network.fit = function(...args) {\n      console.log(\"Preventing automatic fit\");\n      return;\n    };\n\n    // Handle dragging by temporarily unfixing nodes\n    network.on('dragStart', (params: any) => {\n      if (DEBUG) console.log('DragStart event');\n      if (params.nodes && params.nodes.length > 0) {\n        params.nodes.forEach((nodeId: string) => {\n          nodes.update({ id: nodeId, fixed: { x: false, y: false } });\n        });\n      }\n    });\n\n    network.on('dragEnd', (params: any) => {\n      if (DEBUG) console.log('DragEnd event:', params);\n      if (params.nodes && params.nodes.length > 0) {\n        params.nodes.forEach((nodeId: string) => {\n          nodes.update({ id: nodeId, fixed: { x: true, y: true } });\n        });\n        \n        // Send position update\n        const positions = this.getNodePositions();\n        if (DEBUG) console.log('Node positions:', positions);\n        const value = {\n          positions: positions,\n          type: 'position'\n        };\n        if (DEBUG) console.log('Sending dragEnd value:', value);\n        Streamlit.setComponentValue(value);\n      }\n    });\n\n    // Set initial viewport immediately\n    if (props.viewport) {\n      console.log(\"Setting initial viewport:\", props.viewport);\n      requestAnimationFrame(() => {\n        network.moveTo({\n          position: props.viewport!.position,\n          scale: props.viewport!.scale,\n          animation: false\n        });\n      });\n    }\n\n    // Selection handler - ONLY send selection\n    network.on('select', (params) => {\n      if (DEBUG) console.log('Select event:', params);\n      const value = {\n        selected: params.nodes,\n        type: 'selection'\n      };\n      if (DEBUG) console.log('Sending select value:', value);\n      Streamlit.setComponentValue(value);\n    });\n\n    // Viewport handler - ONLY send viewport\n    network.on('zoom', () => {\n      if (DEBUG) console.log('Zoom event');\n      if (this.viewportUpdateTimeout) {\n        clearTimeout(this.viewportUpdateTimeout);\n      }\n\n      this.viewportUpdateTimeout = setTimeout(() => {\n        const value = {\n          viewport: {\n            scale: network.getScale(),\n            position: network.getViewPosition()\n          },\n          type: 'viewport'\n        };\n        if (DEBUG) console.log('Sending zoom value:', value);\n        Streamlit.setComponentValue(value);\n      }, 100);\n    });\n\n    // Add click handler to ensure drag events work properly\n    network.on('click', () => {\n      if (DEBUG) console.log('Click event');\n    });\n\n    // Add dragStart handler to ensure drag events work properly\n    // network.on('dragStart', () => {\n    //   if (DEBUG) console.log('DragStart event');\n    // });\n\n    network.on('stabilized', () => {\n      if (DEBUG) console.log(\"Network stabilized\");\n      this.setState({ isStabilized: true });\n    });\n\n    this.setState({ network, nodes, edges, isStabilized: true }); // Set stabilized to true immediately\n  }\n\n  private getNodePositions() {\n    if (!this.state.network || !this.state.nodes) return {};\n    \n    const positions: { [key: string]: { x: number, y: number } } = {};\n    this.state.nodes.forEach((node) => {\n      const pos = this.state.network!.getPosition(node.id);\n      if (DEBUG) console.log(`Position for ${node.id}:`, pos);\n      positions[node.id] = { x: pos.x, y: pos.y };\n    });\n    \n    return positions;\n  }\n\n  public componentWillUnmount() {\n    if (this.state.network) {\n        this.state.network.destroy();\n    }\n    if (this.animationFrame) {\n        cancelAnimationFrame(this.animationFrame);\n    }\n    if (this.viewportUpdateTimeout) {\n        clearTimeout(this.viewportUpdateTimeout);\n    }\n  }\n\n  private setupBackgroundImage(imageUrl: string) {\n    const img = new Image();\n    img.onload = () => {\n      console.log(\"Background image loaded\", { width: img.width, height: img.height });\n      this.backgroundImage = img;\n      this.startRenderLoop();\n    };\n    img.onerror = (e) => {\n      console.error(\"Error loading background image:\", e);\n    };\n    img.src = imageUrl;\n  }\n\n  private startRenderLoop() {\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n    }\n    this.renderBackground();\n  }\n\n  private renderBackground() {\n    if (!this.backgroundCanvas.current || !this.backgroundImage || !this.state.network) return;\n    \n    const canvas = this.backgroundCanvas.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Get current viewport state\n    const position = this.state.network.getViewPosition();\n    const scale = this.state.network.getScale();\n\n    // Ensure canvas dimensions match container\n    const containerRect = canvas.getBoundingClientRect();\n    canvas.width = containerRect.width;\n    canvas.height = containerRect.height;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Calculate dimensions based on scale\n    const srcWidth = canvas.width / scale;\n    const srcHeight = canvas.height / scale;\n    const imgCenterX = ((this.backgroundImage.width / 2) - srcWidth / 2) + position.x;\n    const imgCenterY = ((this.backgroundImage.height / 2) - srcHeight / 2) + position.y;\n\n    try {\n      ctx.drawImage(\n        this.backgroundImage,\n        imgCenterX,\n        imgCenterY,\n        srcWidth,\n        srcHeight,\n        0,\n        0,\n        canvas.width,\n        canvas.height\n      );\n    } catch (error) {\n      console.error(\"Error rendering background:\", error);\n    }\n\n    this.animationFrame = requestAnimationFrame(() => this.renderBackground());\n  }\n\n  public render() {\n    return (\n      <div\n        ref={this.container}\n        style={{\n          width: '100%',\n          height: '600px',\n          position: 'relative',\n          border: '1px solid #ddd',\n          overflow: 'hidden'\n        }}\n      >\n        <canvas\n          ref={this.backgroundCanvas}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 0,\n            opacity: 0.3\n          }}\n        />\n        <div \n          ref={this.networkContainer}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 1\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStreamlitConnection(VisNetwork);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}