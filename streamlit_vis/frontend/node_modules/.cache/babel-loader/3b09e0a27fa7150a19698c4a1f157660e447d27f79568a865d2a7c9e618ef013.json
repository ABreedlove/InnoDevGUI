{"ast":null,"code":"import React from'react';import{Network}from'vis-network';import{DataSet}from'vis-data';import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import{jsx as _jsx}from\"react/jsx-runtime\";class VisNetwork extends StreamlitComponentBase{constructor(){super(...arguments);this.container=/*#__PURE__*/React.createRef();this.state={network:null,nodes:new DataSet([]),edges:new DataSet([]),prevProps:null};}componentDidMount(){Streamlit.setFrameHeight(600);this.setupNetwork();}componentDidUpdate(){const props=this.props.args;const prevProps=this.state.prevProps;// Only update if props actually changed\nif(prevProps===null||JSON.stringify(prevProps.nodes)!==JSON.stringify(props.nodes)||JSON.stringify(prevProps.edges)!==JSON.stringify(props.edges)||prevProps.background_image!==props.background_image){if(props.background_image!==(prevProps===null||prevProps===void 0?void 0:prevProps.background_image)){this.updateBackgroundImage();}else{this.setupNetwork();}// Update prevProps in state\nthis.setState({prevProps:props});}}setupNetwork(){if(!this.container.current)return;const props=this.props.args;// Clear existing network\nif(this.state.network){this.state.network.destroy();}// Create new datasets\nconst nodes=new DataSet(props.nodes);const edges=new DataSet(props.edges);// Create network with merged options\nconst network=new Network(this.container.current,{nodes,edges},{...props.options,height:'600px',autoResize:true,layout:{randomSeed:1,improvedLayout:true}});// Set up event handlers\nnetwork.on('select',params=>{Streamlit.setComponentValue({selected:params.nodes,positions:this.getNodePositions()});});network.on('dragEnd',()=>{Streamlit.setComponentValue({selected:network.getSelectedNodes(),positions:this.getNodePositions()});});network.once('afterDrawing',()=>{network.fit();});// Update state without triggering another update\nthis.setState({network,nodes,edges});}getNodePositions(){if(!this.state.network||!this.state.nodes)return{};const positions={};this.state.nodes.forEach(node=>{const pos=this.state.network.getPosition(node.id);positions[node.id]={x:pos.x,y:pos.y};});return positions;}updateBackgroundImage(){if(!this.container.current)return;const props=this.props.args;if(props.background_image){this.container.current.style.backgroundImage=`url(${props.background_image})`;this.container.current.style.backgroundSize='cover';this.container.current.style.backgroundPosition='center';}else{this.container.current.style.backgroundImage='none';}}render(){return/*#__PURE__*/_jsx(\"div\",{ref:this.container,style:{width:'100%',height:'600px',minHeight:'600px',border:'1px solid #ddd',borderRadius:'4px',backgroundColor:'#ffffff',position:'relative',overflow:'hidden'}});}}export default withStreamlitConnection(VisNetwork);","map":{"version":3,"names":["React","Network","DataSet","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsx","_jsx","VisNetwork","constructor","arguments","container","createRef","state","network","nodes","edges","prevProps","componentDidMount","setFrameHeight","setupNetwork","componentDidUpdate","props","args","JSON","stringify","background_image","updateBackgroundImage","setState","current","destroy","options","height","autoResize","layout","randomSeed","improvedLayout","on","params","setComponentValue","selected","positions","getNodePositions","getSelectedNodes","once","fit","forEach","node","pos","getPosition","id","x","y","style","backgroundImage","backgroundSize","backgroundPosition","render","ref","width","minHeight","border","borderRadius","backgroundColor","position","overflow"],"sources":["C:/Users/owner/Documents/Innovative Dev/Sensor Sentry GUI - Streamlit/streamlit_vis/frontend/src/VisNetwork.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Network } from 'vis-network';\r\nimport { DataSet } from 'vis-data';\r\nimport {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\n\r\ninterface NetworkProps {\r\n  nodes: any[];\r\n  edges: any[];\r\n  options: any;\r\n  background_image?: string;\r\n  height?: string;\r\n}\r\n\r\ninterface State {\r\n  network: Network | null;\r\n  nodes: DataSet<any>;\r\n  edges: DataSet<any>;\r\n  prevProps: NetworkProps | null;\r\n}\r\n\r\nclass VisNetwork extends StreamlitComponentBase<State> {\r\n  private container = React.createRef<HTMLDivElement>();\r\n  \r\n  public state: State = {\r\n    network: null,\r\n    nodes: new DataSet([]),\r\n    edges: new DataSet([]),\r\n    prevProps: null\r\n  };\r\n\r\n  public componentDidMount() {\r\n    Streamlit.setFrameHeight(600);\r\n    this.setupNetwork();\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    const props = this.props.args as NetworkProps;\r\n    const prevProps = this.state.prevProps;\r\n\r\n    // Only update if props actually changed\r\n    if (prevProps === null || \r\n        JSON.stringify(prevProps.nodes) !== JSON.stringify(props.nodes) ||\r\n        JSON.stringify(prevProps.edges) !== JSON.stringify(props.edges) ||\r\n        prevProps.background_image !== props.background_image) {\r\n      \r\n      if (props.background_image !== prevProps?.background_image) {\r\n        this.updateBackgroundImage();\r\n      } else {\r\n        this.setupNetwork();\r\n      }\r\n      \r\n      // Update prevProps in state\r\n      this.setState({ prevProps: props });\r\n    }\r\n  }\r\n\r\n  private setupNetwork() {\r\n    if (!this.container.current) return;\r\n\r\n    const props = this.props.args as NetworkProps;\r\n\r\n    // Clear existing network\r\n    if (this.state.network) {\r\n      this.state.network.destroy();\r\n    }\r\n\r\n    // Create new datasets\r\n    const nodes = new DataSet(props.nodes);\r\n    const edges = new DataSet(props.edges);\r\n\r\n    // Create network with merged options\r\n    const network = new Network(\r\n      this.container.current,\r\n      { nodes, edges },\r\n      {\r\n        ...props.options,\r\n        height: '600px',\r\n        autoResize: true,\r\n        layout: {\r\n          randomSeed: 1,\r\n          improvedLayout: true\r\n        }\r\n      }\r\n    );\r\n\r\n    // Set up event handlers\r\n    network.on('select', (params) => {\r\n      Streamlit.setComponentValue({\r\n        selected: params.nodes,\r\n        positions: this.getNodePositions()\r\n      });\r\n    });\r\n\r\n    network.on('dragEnd', () => {\r\n      Streamlit.setComponentValue({\r\n        selected: network.getSelectedNodes(),\r\n        positions: this.getNodePositions()\r\n      });\r\n    });\r\n\r\n    network.once('afterDrawing', () => {\r\n      network.fit();\r\n    });\r\n\r\n    // Update state without triggering another update\r\n    this.setState({ \r\n      network, \r\n      nodes, \r\n      edges\r\n    });\r\n  }\r\n\r\n  private getNodePositions() {\r\n    if (!this.state.network || !this.state.nodes) return {};\r\n    \r\n    const positions: { [key: string]: { x: number, y: number } } = {};\r\n    this.state.nodes.forEach((node) => {\r\n      const pos = this.state.network!.getPosition(node.id);\r\n      positions[node.id] = { x: pos.x, y: pos.y };\r\n    });\r\n    \r\n    return positions;\r\n  }\r\n\r\n  private updateBackgroundImage() {\r\n    if (!this.container.current) return;\r\n\r\n    const props = this.props.args as NetworkProps;\r\n    if (props.background_image) {\r\n      this.container.current.style.backgroundImage = `url(${props.background_image})`;\r\n      this.container.current.style.backgroundSize = 'cover';\r\n      this.container.current.style.backgroundPosition = 'center';\r\n    } else {\r\n      this.container.current.style.backgroundImage = 'none';\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={{\r\n          width: '100%',\r\n          height: '600px',\r\n          minHeight: '600px',\r\n          border: '1px solid #ddd',\r\n          borderRadius: '4px',\r\n          backgroundColor: '#ffffff',\r\n          position: 'relative',\r\n          overflow: 'hidden'\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(VisNetwork);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}